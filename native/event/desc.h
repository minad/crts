// Generated by generate.pl from defs.in
enum {
    DSTATS_GC_MARK_PHASE,
    DSTATS_GC_MARK_SLICE,
    DSTATS_GC_SCAVENGER,
    DSTATS_GC_SWEEP_SLICE,
    DSTATS_PROC_PARK,
    DSTATS_PROC_RUN,
    DSTATS_PROC_SERVICE,
    DSTATS_SHUTDOWN,
    DSTATS_STARTUP,
    DSTATS_THREAD_RUN,
    DSTATS_THREAD_SCHED,
    DSTATS_COUNT
};

enum {
    ISTATS_EXCEPTION,
    ISTATS_MODULE_INIT,
    ISTATS_PROC_INIT,
    ISTATS_PROC_MSG_SEND,
    ISTATS_PROC_REQUEST,
    ISTATS_PROC_STALL,
    ISTATS_STACK_GROW,
    ISTATS_STACK_SHRINK,
    ISTATS_THREAD_MIGRATE,
    ISTATS_THREAD_NEW,
    ISTATS_THREAD_SWITCH,
    ISTATS_THREAD_TAKEOVER,
    ISTATS_THREAD_TERMINATED,
    ISTATS_COUNT,
};

CHI_INTERN const char* const chiEventName[] = {
    "GC_MARK_PHASE",
    "GC_MARK_PHASE",
    "GC_MARK_SLICE",
    "GC_MARK_SLICE",
    "GC_SCAVENGER",
    "GC_SCAVENGER",
    "GC_SWEEP_SLICE",
    "GC_SWEEP_SLICE",
    "PROC_PARK",
    "PROC_PARK",
    "PROC_RUN",
    "PROC_RUN",
    "PROC_SERVICE",
    "PROC_SERVICE",
    "SHUTDOWN",
    "SHUTDOWN",
    "STARTUP",
    "STARTUP",
    "THREAD_RUN",
    "THREAD_RUN",
    "THREAD_SCHED",
    "THREAD_SCHED",
    "USER_DURATION",
    "USER_DURATION",
    "BIGINT_OVERFLOW",
    "BLOCK_CHUNK_FREE",
    "BLOCK_CHUNK_NEW",
    "ENTRY_BLACKHOLE",
    "ENTRY_NOTIFY_INT",
    "ENTRY_START",
    "ENTRY_TIMER_INT",
    "ENTRY_UNHANDLED",
    "ENTRY_USER_INT",
    "EXCEPTION",
    "FFI_LOAD",
    "FNLOG_CONT",
    "FNLOG_ENTER",
    "FNLOG_ENTER_JMP",
    "FNLOG_FFI",
    "FNLOG_LEAVE",
    "GC_PHASE_GLOBAL",
    "GC_PHASE_LOCAL",
    "GC_TRIGGER",
    "HEAP_ALLOC_FAILED",
    "HEAP_CHUNK_FREE",
    "HEAP_CHUNK_NEW",
    "HEAP_LIMIT_GC",
    "HEAP_LIMIT_OVERFLOW",
    "HEAP_USAGE",
    "LOG_BEGIN",
    "LOG_END",
    "MODULE_INIT",
    "MODULE_LOAD",
    "MODULE_UNLOAD",
    "PROC_DESTROY",
    "PROC_INIT",
    "PROC_MSG_RECV",
    "PROC_MSG_SEND",
    "PROC_NOTIFY",
    "PROC_REQUEST",
    "PROC_STALL",
    "PROC_SUSPEND",
    "PROF_DISABLED",
    "PROF_ENABLED",
    "PROF_TRACE",
    "SIGNAL",
    "STACK_ACTIVATE",
    "STACK_DEACTIVATE",
    "STACK_GROW",
    "STACK_SCANNED",
    "STACK_SHRINK",
    "STACK_TRACE",
    "STRBUILDER_OVERFLOW",
    "SYSTEM_STATS",
    "THREAD_ENQUEUE",
    "THREAD_MIGRATE",
    "THREAD_NAME",
    "THREAD_NEW",
    "THREAD_SWITCH",
    "THREAD_TAKEOVER",
    "THREAD_TERMINATED",
    "THREAD_YIELD",
    "USER_BUFFER",
    "USER_STRING",
    "WORKER_DESTROY",
    "WORKER_INIT",
    "WORKER_NAME"
};

static const struct CHI_PACKED {
    EventClass   cls        : 2;
    EventContext ctx        : 2;
    uint8_t      stats      : 6;
    uint8_t      begin      : 6;
} eventDesc[] = {
    { .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN, .begin = 0 },
    { .ctx = CTX_RUNTIME, .cls = CLASS_END, .begin = 0, .stats = 1+DSTATS_GC_MARK_PHASE },
    { .ctx = CTX_WORKER, .cls = CLASS_BEGIN, .begin = 0 },
    { .ctx = CTX_WORKER, .cls = CLASS_END, .begin = 0, .stats = 1+DSTATS_GC_MARK_SLICE },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN, .begin = 1 },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_END, .begin = 1, .stats = 1+DSTATS_GC_SCAVENGER },
    { .ctx = CTX_WORKER, .cls = CLASS_BEGIN, .begin = 2 },
    { .ctx = CTX_WORKER, .cls = CLASS_END, .begin = 2, .stats = 1+DSTATS_GC_SWEEP_SLICE },
    { .ctx = CTX_THREAD, .cls = CLASS_BEGIN, .begin = 3 },
    { .ctx = CTX_THREAD, .cls = CLASS_END, .begin = 3, .stats = 1+DSTATS_PROC_PARK },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN, .begin = 4 },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_END, .begin = 4, .stats = 1+DSTATS_PROC_RUN },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN, .begin = 5 },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_END, .begin = 5, .stats = 1+DSTATS_PROC_SERVICE },
    { .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN, .begin = 1 },
    { .ctx = CTX_RUNTIME, .cls = CLASS_END, .begin = 1, .stats = 1+DSTATS_SHUTDOWN },
    { .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN, .begin = 2 },
    { .ctx = CTX_RUNTIME, .cls = CLASS_END, .begin = 2, .stats = 1+DSTATS_STARTUP },
    { .ctx = CTX_THREAD, .cls = CLASS_BEGIN, .begin = 6 },
    { .ctx = CTX_THREAD, .cls = CLASS_END, .begin = 6, .stats = 1+DSTATS_THREAD_RUN },
    { .ctx = CTX_LIBRARY, .cls = CLASS_BEGIN, .begin = 7 },
    { .ctx = CTX_LIBRARY, .cls = CLASS_END, .begin = 7, .stats = 1+DSTATS_THREAD_SCHED },
    { .ctx = CTX_LIBRARY, .cls = CLASS_BEGIN, .begin = 8 },
    { .ctx = CTX_LIBRARY, .cls = CLASS_END, .begin = 8 },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_EXCEPTION },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_MODULE_INIT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT },
    { .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT, .stats = 1+ISTATS_PROC_INIT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT, .stats = 1+ISTATS_PROC_MSG_SEND },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT, .stats = 1+ISTATS_PROC_REQUEST },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT, .stats = 1+ISTATS_PROC_STALL },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_STACK_GROW },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_STACK_SHRINK },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT },
    { .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT, .stats = 1+ISTATS_THREAD_MIGRATE },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_THREAD_NEW },
    { .ctx = CTX_THREAD, .cls = CLASS_INSTANT, .stats = 1+ISTATS_THREAD_SWITCH },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT, .stats = 1+ISTATS_THREAD_TAKEOVER },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT, .stats = 1+ISTATS_THREAD_TERMINATED },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_LIBRARY, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT },
    { .ctx = CTX_WORKER, .cls = CLASS_INSTANT }
};

static const char* const enumChiProcessorRequest[] = {
    "REQUEST_EXIT",
    "REQUEST_DUMP",
    "REQUEST_NOTIFYINTERRUPT",
    "REQUEST_TIMERINTERRUPT",
    "REQUEST_USERINTERRUPT",
    "REQUEST_HANDSHAKE",
    "REQUEST_SCAVENGE",
    "REQUEST_PROMOTE",
};
static const char* const enumChiProcessorMessage[] = {
    "MessageEnqueue",
    "MessageEnqueueRunning",
    "MessageInterrupt",
    "MessageMigrate",
};
static const char* const enumChiSig[] = {
    "SIG_USERINTERRUPT",
    "SIG_DUMP",
};
static const char* const enumChiGCPhase[] = {
    "GC_IDLE",
    "GC_SYNC1",
    "GC_SYNC2",
    "GC_ASYNC",
};
static const char* const enumChiThreadPhase[] = {
    "Running",
    "Terminated",
    "WaitSleep",
    "WaitVarPut",
    "WaitVarTake",
};
