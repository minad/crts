// Generated by generate.pl from defs.in
void chiEvent_THREAD_SCHED_BEGIN(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, THREAD_SCHED_BEGIN);
}

void chiEvent_THREAD_SCHED_END(uint32_t a0) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_SCHED_END,
        .nextTid = a0,
    );
}

void chiEvent_USER_DURATION_BEGIN(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, USER_DURATION_BEGIN);
}

void chiEvent_USER_DURATION_END(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, USER_DURATION_END);
}

void chiEvent_ENTRY_BLACKHOLE(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_BLACKHOLE);
}

void chiEvent_ENTRY_NOTIFY_INT(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_NOTIFY_INT);
}

void chiEvent_ENTRY_START(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_START);
}

void chiEvent_ENTRY_TIMER_INT(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_TIMER_INT);
}

void chiEvent_ENTRY_UNHANDLED(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_UNHANDLED);
}

void chiEvent_ENTRY_USER_INT(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, ENTRY_USER_INT);
}

void chiEvent_PROC_MSG_RECV(uint32_t a0) {
    chiEvent(CHI_CURRENT_PROCESSOR, PROC_MSG_RECV,
        .message = (ChiProcessorMessage)a0,
    );
}

void chiEvent_PROC_MSG_SEND(Chili a0, uint32_t a1) {
    chiEvent(CHI_CURRENT_PROCESSOR, PROC_MSG_SEND,
        .receiverWid = ((ChiProcessor*)chiToPtr(a0))->worker->wid,
        .message = (ChiProcessorMessage)a1,
    );
}

void chiEvent_THREAD_ENQUEUE(uint32_t a0, uint32_t a1) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_ENQUEUE,
        .enqTid = a0,
        .phase = (ChiThreadPhase)a1,
    );
}

void chiEvent_THREAD_MIGRATE(uint32_t a0, Chili a1) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_MIGRATE,
        .migratedTid = a0,
        .newOwnerWid = ((ChiProcessor*)chiToPtr(a1))->worker->wid,
    );
}

void chiEvent_THREAD_NAME(uint32_t a0, Chili a1) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_NAME,
        .nameTid = a0,
        .name = chiStringRef(&a1),
    );
}

void chiEvent_THREAD_TAKEOVER(uint32_t a0, Chili a1) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_TAKEOVER,
        .migratedTid = a0,
        .newOwnerWid = ((ChiProcessor*)chiToPtr(a1))->worker->wid,
    );
}

void chiEvent_THREAD_TERMINATED(void) {
    chiEvent0(CHI_CURRENT_PROCESSOR, THREAD_TERMINATED);
}

void chiEvent_THREAD_YIELD(uint32_t a0) {
    chiEvent(CHI_CURRENT_PROCESSOR, THREAD_YIELD,
        .phase = (ChiThreadPhase)a0,
    );
}

void chiEvent_USER_BUFFER(Chili a0) {
    chiEvent(CHI_CURRENT_PROCESSOR, USER_BUFFER,
        .buffer = { .size = chiBufferSize(a0), .bytes = chiBufferBytes(a0) },
    );
}

void chiEvent_USER_STRING(Chili a0) {
    chiEvent(CHI_CURRENT_PROCESSOR, USER_STRING,
        .string = chiStringRef(&a0),
    );
}

