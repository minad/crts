/* Generated by generate.pl from defs.in */

typedef struct {
    uint32_t size;
    uint8_t* bytes;
} ChiStringRef;

typedef struct ChiRuntime_   ChiRuntime;
typedef struct ChiWorker_    ChiWorker;
typedef struct ChiProcessor_ ChiProcessor;

typedef uint64_t ChiMicros;

typedef uint64_t ChiNanos;

typedef uint64_t ChiMillis;

typedef uint64_t ChiSecs;

typedef uint32_t ChiSig;

typedef uint32_t ChiGCRequestor;

typedef uint32_t ChiGCTrigger;

typedef uint32_t ChiHeapLimit;

typedef struct {
    uint32_t version;
} ChiEventVersion;

typedef struct ChiLocInfo_ {
    ChiStringRef module;
    ChiStringRef fn;
    ChiStringRef file;
    size_t       size;
    uint32_t     line;
    bool         interp;
} ChiLocInfo;

typedef struct ChiActivity_ {
    ChiNanos cpuTimeUser;
    ChiNanos cpuTimeSystem;
    size_t   residentSize;
    uint64_t pageFault;
    uint64_t pageSwap;
    uint64_t contextSwitch;
    uint64_t diskRead;
    uint64_t diskWrite;
} ChiActivity;

typedef struct {
    size_t   allocSinceSweep;
    uint64_t allocSinceStart;
    size_t   totalWords;
} ChiHeapClassUsage;

typedef struct {
    ChiHeapClassUsage small;
    ChiHeapClassUsage medium;
    ChiHeapClassUsage large;
} ChiHeapUsage;

typedef struct {
    size_t count;
    size_t words;
} ChiObjectCount;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
    ChiObjectCount copied1;
} ChiScavengerObjectCount;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerRawCount;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
} ChiScavengerDirtyCount;

typedef struct {
    ChiScavengerDirtyCount  dirty;
    ChiScavengerRawCount    raw;
    ChiScavengerObjectCount object;
    size_t                  collapsed;
    uint32_t                gen;
    bool                    snapshot;
} ChiScavengerStats;

typedef struct {
    ChiObjectCount live;
    ChiObjectCount free;
} ChiSweepClassStats;

typedef struct {
    ChiSweepClassStats small;
    ChiSweepClassStats medium;
    ChiSweepClassStats large;
} ChiSweepStats;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
    size_t         collapsed;
} ChiScanStats;

typedef struct {
    size_t usedWords;
    size_t totalWords;
} ChiMinorUsage;

typedef struct {
    ChiStringRef trace;
} ChiEventStackTrace;

typedef struct {
    ChiStringRef name;
} ChiEventTraceFFI;

typedef struct {
    ChiStringRef name;
    ChiStringRef trace;
} ChiEventException;

typedef struct {
    uint32_t     tid;
    ChiStringRef name;
} ChiEventThreadName;

typedef struct {
    uint32_t tid;
    uint32_t count;
} ChiEventThreadNew;

typedef struct {
    uint32_t count;
} ChiEventThreadTerm;

typedef struct {
    ChiStringRef name;
} ChiEventWorkerName;

typedef struct {
    ChiStringRef data;
} ChiEventUser;

typedef struct {
    ChiStringRef file;
} ChiEventHeapDump;

typedef struct ChiHeapProf_ {
    ChiObjectCount array;
    ChiObjectCount bigint;
    ChiObjectCount box64;
    ChiObjectCount buffer;
    ChiObjectCount data;
    ChiObjectCount ffi;
    ChiObjectCount fn;
    ChiObjectCount raw;
    ChiObjectCount stack;
    ChiObjectCount string;
    ChiObjectCount stringbuilder;
    ChiObjectCount thread;
    ChiObjectCount thunk;
} ChiHeapProf;

typedef struct {
    size_t reqSize;
    size_t oldSize;
    size_t newSize;
    size_t usedSize;
} ChiEventStackSize;

typedef struct {
    size_t oldLimit;
    size_t newLimit;
} ChiEventNursery;

typedef struct {
    size_t    heapSize;
    size_t    size;
    size_t    align;
    uintptr_t start;
} ChiEventChunk;

typedef struct {
    ChiStringRef module;
    ChiStringRef name;
} ChiEventFFI;

typedef struct {
    ChiStringRef module;
    ChiStringRef file;
    ChiStringRef path;
} ChiEventModuleLoad;

typedef struct {
    ChiStringRef module;
} ChiEventModuleName;

typedef struct {
    ChiSig   sig;
} ChiEventSignal;

typedef struct {
    ChiGCTrigger   trigger;
} ChiEventGCSlice;

typedef struct {
    ChiGCTrigger   trigger;
    ChiGCRequestor requestor;
} ChiEventGCRequest;

typedef struct {
    ChiHeapLimit limit;
    size_t heapSize;
    size_t softLimit;
    size_t hardLimit;
} ChiEventHeapLimit;

typedef struct {
    ChiStringRef type;
    size_t       size;
} ChiEventHeapAlloc;

typedef struct {
    size_t count;
} ChiEventBlackhole;

typedef struct {
    uint32_t count;
} ChiEventResumeReq;

typedef struct {
    ChiHeapUsage  major;
    ChiMinorUsage minor;
    size_t        totalWords;
} ChiEventHeapUsage;

provider chili {
  probe begin(ChiRuntime*, ChiEventVersion*);
  probe end(ChiRuntime*);
  probe proc__init(ChiProcessor*);
  probe proc__destroy(ChiProcessor*);
  probe proc__resume__req(ChiProcessor*, ChiEventResumeReq*);
  probe proc__tick(ChiProcessor*);
  probe worker__init(ChiWorker*);
  probe worker__destroy(ChiWorker*);
  probe worker__name(ChiWorker*, ChiEventWorkerName*);
  probe module__load(ChiProcessor*, ChiEventModuleLoad*);
  probe module__unload(ChiProcessor*, ChiEventModuleName*);
  probe module__init(ChiProcessor*, ChiEventModuleName*);
  probe ffi__load(ChiProcessor*, ChiEventFFI*);
  probe trace__ffi(ChiProcessor*, ChiEventTraceFFI*);
  probe trace__enter(ChiProcessor*, ChiEventTrace*);
  probe trace__leave(ChiProcessor*, ChiEventTrace*);
  probe trace__enter__jmp(ChiProcessor*, ChiEventTrace*);
  probe exception__handled(ChiProcessor*, ChiEventException*);
  probe exception__unhandled(ChiProcessor*, ChiEventException*);
  probe gc__block(ChiProcessor*);
  probe gc__unblock(ChiProcessor*);
  probe gc__req(ChiRuntime*, ChiEventGCRequest*);
  probe gc__mark__stats(ChiWorker*, ChiEventMark*);
  probe gc__sweep__stats(ChiWorker*, ChiEventSweep*);
  probe gc__sweep__notify(ChiRuntime*);
  probe nursery__resize(ChiProcessor*, ChiEventNursery*);
  probe heap__before__scav(ChiProcessor*, ChiEventHeapUsage*);
  probe heap__after__scav(ChiProcessor*, ChiEventHeapUsage*);
  probe block__chunk__new(ChiRuntime*, ChiEventChunk*);
  probe block__chunk__free(ChiRuntime*, ChiEventChunk*);
  probe heap__chunk__new(ChiRuntime*, ChiEventChunk*);
  probe heap__chunk__free(ChiRuntime*, ChiEventChunk*);
  probe heap__limit(ChiRuntime*, ChiEventHeapLimit*);
  probe heap__alloc__failed(ChiProcessor*, ChiEventHeapAlloc*);
  probe par(ChiProcessor*);
  probe stack__grow(ChiProcessor*, ChiEventStackSize*);
  probe stack__shrink(ChiProcessor*, ChiEventStackSize*);
  probe stack__trace(ChiProcessor*, ChiEventStackTrace*);
  probe stack__blackhole(ChiProcessor*, ChiEventBlackhole*);
  probe prof__trace(ChiWorker*, ChiEventStackTrace*);
  probe prof__enabled(ChiWorker*);
  probe prof__disabled(ChiWorker*);
  probe thread__name(ChiProcessor*, ChiEventThreadName*);
  probe thread__new(ChiProcessor*, ChiEventThreadNew*);
  probe thread__terminated(ChiProcessor*, ChiEventThreadTerm*);
  probe thread__blackhole(ChiProcessor*);
  probe bigint__overflow(ChiProcessor*);
  probe strbuilder__overflow(ChiProcessor*);
  probe tick(ChiRuntime*);
  probe signal(ChiRuntime*, ChiEventSignal*);
  probe activity(ChiRuntime*, ChiEventActivity*);
  probe user(ChiProcessor*, ChiEventUser*);
  probe heap__check__begin(ChiProcessor*);
  probe heap__check__end(ChiProcessor*);
  probe heap__dump__begin(ChiProcessor*);
  probe heap__dump__end(ChiProcessor*, ChiEventHeapDump*);
  probe heap__prof__begin(ChiProcessor*);
  probe heap__prof__end(ChiProcessor*, ChiEventHeapProf*);
  probe gc__slice__begin(ChiProcessor*);
  probe gc__slice__end(ChiProcessor*, ChiEventGCSlice*);
  probe gc__marksweep__begin(ChiRuntime*);
  probe gc__marksweep__end(ChiRuntime*);
  probe gc__mark__phase__begin(ChiRuntime*);
  probe gc__mark__phase__end(ChiRuntime*);
  probe gc__mark__slice__begin(ChiWorker*);
  probe gc__mark__slice__end(ChiWorker*);
  probe gc__sweep__phase__begin(ChiRuntime*);
  probe gc__sweep__phase__end(ChiRuntime*);
  probe gc__sweep__slice__begin(ChiWorker*);
  probe gc__sweep__slice__end(ChiWorker*);
  probe gc__scavenger__begin(ChiProcessor*);
  probe gc__scavenger__end(ChiProcessor*, ChiEventScavenger*);
  probe proc__run__begin(ChiProcessor*);
  probe proc__run__end(ChiProcessor*);
  probe proc__suspend__begin(ChiProcessor*);
  probe proc__suspend__end(ChiProcessor*);
  probe proc__wait__sync__begin(ChiProcessor*);
  probe proc__wait__sync__end(ChiProcessor*);
  probe proc__sync__begin(ChiProcessor*);
  probe proc__sync__end(ChiProcessor*);
  probe thread__sched__begin(ChiProcessor*);
  probe thread__sched__end(ChiProcessor*);
  probe thread__run__begin(ChiProcessor*);
  probe thread__run__end(ChiProcessor*);
  probe user__duration__begin(ChiProcessor*);
  probe user__duration__end(ChiProcessor*, ChiEventUser*);
  probe startup__begin(ChiRuntime*);
  probe startup__end(ChiRuntime*);
  probe shutdown__begin(ChiRuntime*);
  probe shutdown__end(ChiRuntime*);
};
