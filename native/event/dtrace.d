/* Generated by generate.pl from defs.in */

typedef struct {
    uint32_t size;
    uint8_t* bytes;
} ChiBytesRef;

typedef struct {
    uint32_t size;
    uint8_t* bytes;
} ChiStringRef;

typedef struct ChiRuntime_   ChiRuntime;
typedef struct ChiWorker_    ChiWorker;
typedef struct ChiProcessor_ ChiProcessor;

typedef uint64_t ChiMicros;

typedef uint64_t ChiNanos;

typedef uint64_t ChiMillis;

typedef uint64_t ChiSecs;

typedef uint32_t ChiProcessorRequest;

typedef uint32_t ChiProcessorMessage;

typedef uint32_t ChiSig;

typedef uint32_t ChiGCPhase;

typedef uint32_t ChiThreadPhase;

typedef struct {
    uint32_t newTid;
    uintptr_t newStack;
} ChiEventThreadNew;

typedef struct {
    ChiStringRef fn;
    ChiStringRef file;
    size_t       size;
    uint32_t     line;
    bool         interp;
} ChiLocInfo;

typedef struct {
    ChiNanos cpuTimeUser;
    ChiNanos cpuTimeSystem;
    size_t   maxResidentSize;
    size_t   currResidentSize;
    uint64_t pageFault;
    uint64_t voluntaryContextSwitch;
    uint64_t involuntaryContextSwitch;
} ChiSystemStats;

typedef struct {
    uint64_t allocSize;
    size_t   totalSize;
} ChiHeapClassUsage;

typedef struct {
    ChiHeapClassUsage small;
    ChiHeapClassUsage medium;
    ChiHeapClassUsage large;
    size_t            totalSize;
} ChiHeapUsage;

typedef struct {
    size_t count;
    size_t words;
} ChiObjectCount;

typedef struct {
    ChiObjectCount copied;
    ChiObjectCount scanned;
    size_t         thunk;
} ChiPromoteStats;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerObjectCount;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerRawCount;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
    ChiObjectCount card;
} ChiScavengerDirtyCount;

typedef struct {
    size_t usedSize;
    size_t totalSize;
} ChiMinorHeapUsage;

typedef struct {
    ChiScavengerDirtyCount  dirty;
    ChiScavengerRawCount    raw;
    ChiScavengerObjectCount object;
    size_t                  collapsed;
    uint32_t                aging;
    bool                    snapshot;
} ChiScavengerStats;

typedef struct {
    ChiPromoteStats   promoted;
    ChiScavengerStats scavenger;
    ChiMinorHeapUsage minorHeapBefore;
    ChiMinorHeapUsage minorHeapAfter;
} ChiEventScavenger;

typedef struct {
    ChiObjectCount alive;
    ChiObjectCount garbage;
} ChiSweepClassStats;

typedef struct {
    ChiSweepClassStats small;
    ChiSweepClassStats medium;
    ChiSweepClassStats large;
} ChiSweepStats;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
    size_t         collapsed;
} ChiScanStats;

typedef struct {
    uintptr_t stack;
    size_t size;
    size_t step;
    size_t copied;
} ChiEventStackSize;

typedef struct {
    uintptr_t stack;
    ChiStringRef trace;
} ChiEventStackTrace;

typedef struct {
    uintptr_t stack;
} ChiEventStack;

typedef struct {
    ChiStringRef name;
} ChiEventFnLogFFI;

typedef struct {
    ChiStringRef name;
    ChiStringRef trace;
} ChiEventException;

typedef struct {
    ChiProcessorRequest request;
} ChiEventProcRequest;

typedef struct {
    ChiWid receiverWid;
    ChiProcessorMessage message;
} ChiEventProcMsgSend;

typedef struct {
    ChiProcessorMessage message;
} ChiEventProcMsgRecv;

typedef struct {
    ChiStringRef name;
} ChiEventWorkerName;

typedef struct {
    ChiBytesRef buffer;
} ChiEventUserBuffer;

typedef struct {
    ChiStringRef string;
} ChiEventUserString;

typedef struct {
    size_t    heapSize;
    size_t    size;
    size_t    align;
    uintptr_t start;
} ChiEventChunk;

typedef struct {
    ChiStringRef module;
    ChiStringRef name;
} ChiEventFFI;

typedef struct {
    ChiStringRef module;
    ChiStringRef file;
    ChiStringRef path;
} ChiEventModuleLoad;

typedef struct {
    ChiStringRef module;
} ChiEventModuleName;

typedef struct {
    ChiSig sig;
} ChiEventSignal;

typedef struct {
    ChiStringRef type;
    size_t       size;
} ChiEventHeapAlloc;

typedef struct {
    ChiWid notifyWid;
} ChiEventProcNotify;

typedef struct {
    uint32_t ms;
} ChiEventProcSuspend;

typedef struct {
    ChiThreadPhase phase;
} ChiEventThreadYield;

typedef struct {
    uint32_t nextTid;
} ChiEventThreadNext;

typedef struct {
    uint32_t       enqTid;
    ChiThreadPhase phase;
} ChiEventThreadEnqueue;

typedef struct {
    uint32_t     nameTid;
    ChiStringRef name;
} ChiEventThreadName;

typedef struct {
    ChiWid wid;
} ChiEventProcStall;

typedef struct {
    uint32_t migratedTid;
    ChiWid   newOwnerWid;
} ChiEventThreadMigrate;

typedef struct {
    ChiGCPhase phase;
} ChiEventGCPhase;

provider chili {
  probe gc__mark__phase__begin(ChiRuntime*);
  probe gc__mark__phase__end(ChiRuntime*);
  probe gc__mark__slice__begin(ChiWorker*);
  probe gc__mark__slice__end(ChiWorker*, ChiEventMark*);
  probe gc__scavenger__begin(ChiProcessor*);
  probe gc__scavenger__end(ChiProcessor*, ChiEventScavenger*);
  probe gc__sweep__slice__begin(ChiWorker*);
  probe gc__sweep__slice__end(ChiWorker*, ChiEventSweep*);
  probe proc__park__begin(ChiProcessor*);
  probe proc__park__end(ChiProcessor*);
  probe proc__run__begin(ChiProcessor*);
  probe proc__run__end(ChiProcessor*);
  probe proc__service__begin(ChiProcessor*);
  probe proc__service__end(ChiProcessor*);
  probe shutdown__begin(ChiRuntime*);
  probe shutdown__end(ChiRuntime*);
  probe startup__begin(ChiRuntime*);
  probe startup__end(ChiRuntime*);
  probe thread__run__begin(ChiProcessor*);
  probe thread__run__end(ChiProcessor*);
  probe thread__sched__begin(ChiProcessor*);
  probe thread__sched__end(ChiProcessor*, ChiEventThreadNext*);
  probe user__duration__begin(ChiProcessor*);
  probe user__duration__end(ChiProcessor*);
  probe bigint__overflow(ChiProcessor*);
  probe block__chunk__free(ChiRuntime*, ChiEventChunk*);
  probe block__chunk__new(ChiRuntime*, ChiEventChunk*);
  probe entry__blackhole(ChiProcessor*);
  probe entry__notify__int(ChiProcessor*);
  probe entry__start(ChiProcessor*);
  probe entry__timer__int(ChiProcessor*);
  probe entry__unhandled(ChiProcessor*);
  probe entry__user__int(ChiProcessor*);
  probe exception(ChiProcessor*, ChiEventException*);
  probe ffi__load(ChiProcessor*, ChiEventFFI*);
  probe fnlog__cont(ChiProcessor*, ChiEventFnLog*);
  probe fnlog__enter(ChiProcessor*, ChiEventFnLog*);
  probe fnlog__enter__jmp(ChiProcessor*, ChiEventFnLog*);
  probe fnlog__ffi(ChiProcessor*, ChiEventFnLogFFI*);
  probe fnlog__leave(ChiProcessor*, ChiEventFnLog*);
  probe gc__phase__global(ChiProcessor*, ChiEventGCPhase*);
  probe gc__phase__local(ChiProcessor*, ChiEventGCPhase*);
  probe gc__trigger(ChiRuntime*);
  probe heap__alloc__failed(ChiProcessor*, ChiEventHeapAlloc*);
  probe heap__chunk__free(ChiRuntime*, ChiEventChunk*);
  probe heap__chunk__new(ChiRuntime*, ChiEventChunk*);
  probe heap__limit__gc(ChiRuntime*);
  probe heap__limit__overflow(ChiRuntime*);
  probe heap__usage(ChiProcessor*, ChiEventHeapUsage*);
  probe log__begin(ChiRuntime*);
  probe log__end(ChiRuntime*);
  probe module__init(ChiProcessor*, ChiEventModuleInit*);
  probe module__load(ChiProcessor*, ChiEventModuleLoad*);
  probe module__unload(ChiProcessor*, ChiEventModuleName*);
  probe proc__destroy(ChiProcessor*);
  probe proc__init(ChiProcessor*);
  probe proc__msg__recv(ChiProcessor*, ChiEventProcMsgRecv*);
  probe proc__msg__send(ChiProcessor*, ChiEventProcMsgSend*);
  probe proc__notify(ChiProcessor*, ChiEventProcNotify*);
  probe proc__request(ChiRuntime*, ChiEventProcRequest*);
  probe proc__stall(ChiRuntime*, ChiEventProcStall*);
  probe proc__suspend(ChiProcessor*, ChiEventProcSuspend*);
  probe prof__disabled(ChiWorker*);
  probe prof__enabled(ChiWorker*);
  probe prof__trace(ChiWorker*, ChiEventStackTrace*);
  probe signal(ChiRuntime*, ChiEventSignal*);
  probe stack__activate(ChiProcessor*, ChiEventStack*);
  probe stack__deactivate(ChiProcessor*, ChiEventStack*);
  probe stack__grow(ChiProcessor*, ChiEventStackSize*);
  probe stack__scanned(ChiProcessor*, ChiEventStack*);
  probe stack__shrink(ChiProcessor*, ChiEventStackSize*);
  probe stack__trace(ChiProcessor*, ChiEventStackTrace*);
  probe strbuilder__overflow(ChiProcessor*);
  probe system__stats(ChiRuntime*, ChiEventSystemStats*);
  probe thread__enqueue(ChiProcessor*, ChiEventThreadEnqueue*);
  probe thread__migrate(ChiProcessor*, ChiEventThreadMigrate*);
  probe thread__name(ChiProcessor*, ChiEventThreadName*);
  probe thread__new(ChiProcessor*, ChiEventThreadNew*);
  probe thread__switch(ChiProcessor*, ChiEventThreadNext*);
  probe thread__takeover(ChiProcessor*, ChiEventThreadMigrate*);
  probe thread__terminated(ChiProcessor*);
  probe thread__yield(ChiProcessor*, ChiEventThreadYield*);
  probe user__buffer(ChiProcessor*, ChiEventUserBuffer*);
  probe user__string(ChiProcessor*, ChiEventUserString*);
  probe worker__destroy(ChiWorker*);
  probe worker__init(ChiWorker*);
  probe worker__name(ChiWorker*, ChiEventWorkerName*);
};
