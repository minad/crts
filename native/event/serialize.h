// Generated by generate.pl from defs.in

WPAYLOAD_BEGIN(Chunk, ChiEventChunk* d)
    WFIELD(heapSize, WDEC(d->heapSize));
    WFIELD(size, WDEC(d->size));
    WFIELD(align, WDEC(d->align));
    WFIELD(start, WHEX(d->start));
WPAYLOAD_END

WPAYLOAD_BEGIN(Exception, ChiEventException* d)
    WFIELD(name, WSTR(d->name));
    WFIELD(trace, WSTR(d->trace));
    WFIELD(handled, WBOOL(d->handled));
WPAYLOAD_END

WPAYLOAD_BEGIN(FFI, ChiEventFFI* d)
    WFIELD(module, WSTR(d->module));
    WFIELD(name, WSTR(d->name));
WPAYLOAD_END

WPAYLOAD_BEGIN(FnLog, ChiEventFnLog* d)
    WFIELD(fn, WSTR(d->fn));
    WFIELD(file, WSTR(d->file));
    WFIELD(size, WDEC(d->size));
    WFIELD(line, WDEC(d->line));
    WFIELD(interp, WBOOL(d->interp));
WPAYLOAD_END

WPAYLOAD_BEGIN(FnLogFFI, ChiEventFnLogFFI* d)
    WFIELD(name, WSTR(d->name));
WPAYLOAD_END

WPAYLOAD_BEGIN(GCPhase, ChiEventGCPhase* d)
    WFIELD(phase, WENUM(ChiGCPhase, d->phase));
WPAYLOAD_END

WPAYLOAD_BEGIN(HeapAlloc, ChiEventHeapAlloc* d)
    WFIELD(type, WSTR(d->type));
    WFIELD(size, WDEC(d->size));
WPAYLOAD_END

WPAYLOAD_BEGIN(HeapLimit, ChiEventHeapLimit* d)
    WFIELD(heapSize, WDEC(d->heapSize));
    WFIELD(softLimit, WDEC(d->softLimit));
    WFIELD(hardLimit, WDEC(d->hardLimit));
    WFIELD(limit, WENUM(ChiHeapLimit, d->limit));
WPAYLOAD_END

WPAYLOAD_BEGIN(HeapUsage, ChiEventHeapUsage* d)
    WBLOCK_BEGIN(small);
        WFIELD(allocWords, WDEC(d->small.allocWords));
        WFIELD(totalWords, WDEC(d->small.totalWords));
    WBLOCK_END(small);
    WBLOCK_BEGIN(medium);
        WFIELD(allocWords, WDEC(d->medium.allocWords));
        WFIELD(totalWords, WDEC(d->medium.totalWords));
    WBLOCK_END(medium);
    WBLOCK_BEGIN(large);
        WFIELD(allocWords, WDEC(d->large.allocWords));
        WFIELD(totalWords, WDEC(d->large.totalWords));
    WBLOCK_END(large);
    WFIELD(totalChunkWords, WDEC(d->totalChunkWords));
WPAYLOAD_END

WPAYLOAD_BEGIN(Mark, ChiEventMark* d)
    WBLOCK_BEGIN(object);
        WFIELD(count, WDEC(d->object.count));
        WFIELD(words, WDEC(d->object.words));
    WBLOCK_END(object);
    WBLOCK_BEGIN(stack);
        WFIELD(count, WDEC(d->stack.count));
        WFIELD(words, WDEC(d->stack.words));
    WBLOCK_END(stack);
    WFIELD(collapsed, WDEC(d->collapsed));
WPAYLOAD_END

WPAYLOAD_BEGIN(ModuleInit, ChiEventModuleInit* d)
    WFIELD(fn, WSTR(d->fn));
    WFIELD(file, WSTR(d->file));
    WFIELD(size, WDEC(d->size));
    WFIELD(line, WDEC(d->line));
    WFIELD(interp, WBOOL(d->interp));
WPAYLOAD_END

WPAYLOAD_BEGIN(ModuleLoad, ChiEventModuleLoad* d)
    WFIELD(module, WSTR(d->module));
    WFIELD(file, WSTR(d->file));
    WFIELD(path, WSTR(d->path));
WPAYLOAD_END

WPAYLOAD_BEGIN(ModuleName, ChiEventModuleName* d)
    WFIELD(module, WSTR(d->module));
WPAYLOAD_END

WPAYLOAD_BEGIN(ProcMsgRecv, ChiEventProcMsgRecv* d)
    WFIELD(message, WENUM(ChiProcessorMessage, d->message));
WPAYLOAD_END

WPAYLOAD_BEGIN(ProcMsgSend, ChiEventProcMsgSend* d)
    WFIELD(receiverWid, WDEC(d->receiverWid));
    WFIELD(message, WENUM(ChiProcessorMessage, d->message));
WPAYLOAD_END

WPAYLOAD_BEGIN(ProcRequest, ChiEventProcRequest* d)
    WFIELD(request, WENUM(ChiProcessorRequest, d->request));
WPAYLOAD_END

WPAYLOAD_BEGIN(ProcStall, ChiEventProcStall* d)
    WFIELD(wid, WDEC(d->wid));
WPAYLOAD_END

WPAYLOAD_BEGIN(ProcSuspend, ChiEventProcSuspend* d)
    WFIELD(suspendWid, WDEC(d->suspendWid));
    WFIELD(ms, WDEC(d->ms));
WPAYLOAD_END

WPAYLOAD_BEGIN(Scavenger, ChiEventScavenger* d)
    WBLOCK_BEGIN(promoted);
        WBLOCK_BEGIN(copied);
            WFIELD(count, WDEC(d->promoted.copied.count));
            WFIELD(words, WDEC(d->promoted.copied.words));
        WBLOCK_END(copied);
        WBLOCK_BEGIN(scanned);
            WFIELD(count, WDEC(d->promoted.scanned.count));
            WFIELD(words, WDEC(d->promoted.scanned.words));
        WBLOCK_END(scanned);
        WFIELD(thunk, WDEC(d->promoted.thunk));
    WBLOCK_END(promoted);
    WBLOCK_BEGIN(scavenger);
        WBLOCK_BEGIN(dirty);
            WBLOCK_BEGIN(major);
                WFIELD(count, WDEC(d->scavenger.dirty.major.count));
                WFIELD(words, WDEC(d->scavenger.dirty.major.words));
            WBLOCK_END(major);
            WBLOCK_BEGIN(stacks);
                WFIELD(count, WDEC(d->scavenger.dirty.stacks.count));
                WFIELD(words, WDEC(d->scavenger.dirty.stacks.words));
            WBLOCK_END(stacks);
        WBLOCK_END(dirty);
        WBLOCK_BEGIN(raw);
            WBLOCK_BEGIN(promoted);
                WFIELD(count, WDEC(d->scavenger.raw.promoted.count));
                WFIELD(words, WDEC(d->scavenger.raw.promoted.words));
            WBLOCK_END(promoted);
            WBLOCK_BEGIN(copied);
                WFIELD(count, WDEC(d->scavenger.raw.copied.count));
                WFIELD(words, WDEC(d->scavenger.raw.copied.words));
            WBLOCK_END(copied);
        WBLOCK_END(raw);
        WBLOCK_BEGIN(object);
            WBLOCK_BEGIN(promoted);
                WFIELD(count, WDEC(d->scavenger.object.promoted.count));
                WFIELD(words, WDEC(d->scavenger.object.promoted.words));
            WBLOCK_END(promoted);
            WBLOCK_BEGIN(copied);
                WFIELD(count, WDEC(d->scavenger.object.copied.count));
                WFIELD(words, WDEC(d->scavenger.object.copied.words));
            WBLOCK_END(copied);
        WBLOCK_END(object);
        WFIELD(collapsed, WDEC(d->scavenger.collapsed));
        WFIELD(aging, WDEC(d->scavenger.aging));
        WFIELD(snapshot, WBOOL(d->scavenger.snapshot));
    WBLOCK_END(scavenger);
    WBLOCK_BEGIN(minorHeapBefore);
        WFIELD(usedWords, WDEC(d->minorHeapBefore.usedWords));
        WFIELD(totalWords, WDEC(d->minorHeapBefore.totalWords));
    WBLOCK_END(minorHeapBefore);
    WBLOCK_BEGIN(minorHeapAfter);
        WFIELD(usedWords, WDEC(d->minorHeapAfter.usedWords));
        WFIELD(totalWords, WDEC(d->minorHeapAfter.totalWords));
    WBLOCK_END(minorHeapAfter);
WPAYLOAD_END

WPAYLOAD_BEGIN(Signal, ChiEventSignal* d)
    WFIELD(sig, WENUM(ChiSig, d->sig));
WPAYLOAD_END

WPAYLOAD_BEGIN(StackActive, ChiEventStackActive* d)
    WFIELD(stack, WHEX(d->stack));
    WFIELD(scanned, WBOOL(d->scanned));
WPAYLOAD_END

WPAYLOAD_BEGIN(StackSize, ChiEventStackSize* d)
    WFIELD(oldStack, WHEX(d->oldStack));
    WFIELD(newStack, WHEX(d->newStack));
    WFIELD(reqSize, WDEC(d->reqSize));
    WFIELD(oldSize, WDEC(d->oldSize));
    WFIELD(newSize, WDEC(d->newSize));
    WFIELD(usedSize, WDEC(d->usedSize));
WPAYLOAD_END

WPAYLOAD_BEGIN(StackTrace, ChiEventStackTrace* d)
    WFIELD(stack, WHEX(d->stack));
    WFIELD(trace, WSTR(d->trace));
WPAYLOAD_END

WPAYLOAD_BEGIN(Sweep, ChiEventSweep* d)
    WBLOCK_BEGIN(small);
        WBLOCK_BEGIN(alive);
            WFIELD(count, WDEC(d->small.alive.count));
            WFIELD(words, WDEC(d->small.alive.words));
        WBLOCK_END(alive);
        WBLOCK_BEGIN(garbage);
            WFIELD(count, WDEC(d->small.garbage.count));
            WFIELD(words, WDEC(d->small.garbage.words));
        WBLOCK_END(garbage);
    WBLOCK_END(small);
    WBLOCK_BEGIN(medium);
        WBLOCK_BEGIN(alive);
            WFIELD(count, WDEC(d->medium.alive.count));
            WFIELD(words, WDEC(d->medium.alive.words));
        WBLOCK_END(alive);
        WBLOCK_BEGIN(garbage);
            WFIELD(count, WDEC(d->medium.garbage.count));
            WFIELD(words, WDEC(d->medium.garbage.words));
        WBLOCK_END(garbage);
    WBLOCK_END(medium);
    WBLOCK_BEGIN(large);
        WBLOCK_BEGIN(alive);
            WFIELD(count, WDEC(d->large.alive.count));
            WFIELD(words, WDEC(d->large.alive.words));
        WBLOCK_END(alive);
        WBLOCK_BEGIN(garbage);
            WFIELD(count, WDEC(d->large.garbage.count));
            WFIELD(words, WDEC(d->large.garbage.words));
        WBLOCK_END(garbage);
    WBLOCK_END(large);
WPAYLOAD_END

WPAYLOAD_BEGIN(SystemStats, ChiEventSystemStats* d)
    WFIELD(cpuTimeUser, WDEC(CHI_UN(Nanos, d->cpuTimeUser)));
    WFIELD(cpuTimeSystem, WDEC(CHI_UN(Nanos, d->cpuTimeSystem)));
    WFIELD(residentSize, WDEC(d->residentSize));
    WFIELD(pageFault, WDEC(d->pageFault));
    WFIELD(contextSwitch, WDEC(d->contextSwitch));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadEnqueue, ChiEventThreadEnqueue* d)
    WFIELD(enqTid, WDEC(d->enqTid));
    WFIELD(phase, WENUM(ChiThreadPhase, d->phase));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadMigrate, ChiEventThreadMigrate* d)
    WFIELD(migratedTid, WDEC(d->migratedTid));
    WFIELD(newOwnerWid, WDEC(d->newOwnerWid));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadName, ChiEventThreadName* d)
    WFIELD(nameTid, WDEC(d->nameTid));
    WFIELD(name, WSTR(d->name));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadNew, ChiEventThreadNew* d)
    WFIELD(newTid, WDEC(d->newTid));
    WFIELD(newStack, WHEX(d->newStack));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadNext, ChiEventThreadNext* d)
    WFIELD(nextTid, WDEC(d->nextTid));
WPAYLOAD_END

WPAYLOAD_BEGIN(ThreadYield, ChiEventThreadYield* d)
    WFIELD(phase, WENUM(ChiThreadPhase, d->phase));
WPAYLOAD_END

WPAYLOAD_BEGIN(UserBuffer, ChiEventUserBuffer* d)
    WFIELD(buffer, WBYTES(d->buffer));
WPAYLOAD_END

WPAYLOAD_BEGIN(UserString, ChiEventUserString* d)
    WFIELD(string, WSTR(d->string));
WPAYLOAD_END

WPAYLOAD_BEGIN(WorkerName, ChiEventWorkerName* d)
    WFIELD(name, WSTR(d->name));
WPAYLOAD_END

WEVENT_BEGIN
   WFIELD(ts, WDEC(CHI_UN(Nanos, e->ts)));
   if (eventDesc[e->type].cls == CLASS_END)
       WFIELD(dur, WDEC(CHI_UN(Nanos, e->dur)));
   if (eventDesc[e->type].ctx != CTX_RUNTIME)
       WFIELD(wid, WDEC(e->wid));
   if (eventDesc[e->type].ctx == CTX_THREAD)
       WFIELD(tid, WDEC(e->tid));
   switch (e->type) {
   case CHI_EVENT_GC_MARK_PHASE_BEGIN: break;
   case CHI_EVENT_GC_MARK_PHASE_END: break;
   case CHI_EVENT_GC_MARK_SLICE_BEGIN: break;
   case CHI_EVENT_GC_MARK_SLICE_END: WPAYLOAD(Mark, &e->payload->GC_MARK_SLICE_END); break;
   case CHI_EVENT_GC_SCAVENGER_BEGIN: break;
   case CHI_EVENT_GC_SCAVENGER_END: WPAYLOAD(Scavenger, &e->payload->GC_SCAVENGER_END); break;
   case CHI_EVENT_GC_SWEEP_SLICE_BEGIN: break;
   case CHI_EVENT_GC_SWEEP_SLICE_END: WPAYLOAD(Sweep, &e->payload->GC_SWEEP_SLICE_END); break;
   case CHI_EVENT_PROC_PARK_BEGIN: break;
   case CHI_EVENT_PROC_PARK_END: break;
   case CHI_EVENT_PROC_RUN_BEGIN: break;
   case CHI_EVENT_PROC_RUN_END: break;
   case CHI_EVENT_PROC_SERVICE_BEGIN: break;
   case CHI_EVENT_PROC_SERVICE_END: break;
   case CHI_EVENT_SHUTDOWN_BEGIN: break;
   case CHI_EVENT_SHUTDOWN_END: break;
   case CHI_EVENT_STARTUP_BEGIN: break;
   case CHI_EVENT_STARTUP_END: break;
   case CHI_EVENT_THREAD_RUN_BEGIN: break;
   case CHI_EVENT_THREAD_RUN_END: break;
   case CHI_EVENT_THREAD_SCHED_BEGIN: break;
   case CHI_EVENT_THREAD_SCHED_END: WPAYLOAD(ThreadNext, &e->payload->THREAD_SCHED_END); break;
   case CHI_EVENT_USER_DURATION_BEGIN: break;
   case CHI_EVENT_USER_DURATION_END: break;
   case CHI_EVENT_BIGINT_OVERFLOW: break;
   case CHI_EVENT_BLOCK_CHUNK_FREE: WPAYLOAD(Chunk, &e->payload->BLOCK_CHUNK_FREE); break;
   case CHI_EVENT_BLOCK_CHUNK_NEW: WPAYLOAD(Chunk, &e->payload->BLOCK_CHUNK_NEW); break;
   case CHI_EVENT_ENTRY_BLACKHOLE: break;
   case CHI_EVENT_ENTRY_START: break;
   case CHI_EVENT_ENTRY_TIMER_INT: break;
   case CHI_EVENT_ENTRY_UNHANDLED: break;
   case CHI_EVENT_ENTRY_USER_INT: break;
   case CHI_EVENT_EXCEPTION: WPAYLOAD(Exception, &e->payload->EXCEPTION); break;
   case CHI_EVENT_FFI_LOAD: WPAYLOAD(FFI, &e->payload->FFI_LOAD); break;
   case CHI_EVENT_FNLOG_CONT: WPAYLOAD(FnLog, &e->payload->FNLOG_CONT); break;
   case CHI_EVENT_FNLOG_ENTER: WPAYLOAD(FnLog, &e->payload->FNLOG_ENTER); break;
   case CHI_EVENT_FNLOG_ENTER_JMP: WPAYLOAD(FnLog, &e->payload->FNLOG_ENTER_JMP); break;
   case CHI_EVENT_FNLOG_FFI: WPAYLOAD(FnLogFFI, &e->payload->FNLOG_FFI); break;
   case CHI_EVENT_FNLOG_LEAVE: WPAYLOAD(FnLog, &e->payload->FNLOG_LEAVE); break;
   case CHI_EVENT_GC_NOTIFY: break;
   case CHI_EVENT_GC_PHASE_GLOBAL: WPAYLOAD(GCPhase, &e->payload->GC_PHASE_GLOBAL); break;
   case CHI_EVENT_GC_PHASE_LOCAL: WPAYLOAD(GCPhase, &e->payload->GC_PHASE_LOCAL); break;
   case CHI_EVENT_GC_TRIGGER: break;
   case CHI_EVENT_HEAP_ALLOC_FAILED: WPAYLOAD(HeapAlloc, &e->payload->HEAP_ALLOC_FAILED); break;
   case CHI_EVENT_HEAP_CHUNK_FREE: WPAYLOAD(Chunk, &e->payload->HEAP_CHUNK_FREE); break;
   case CHI_EVENT_HEAP_CHUNK_NEW: WPAYLOAD(Chunk, &e->payload->HEAP_CHUNK_NEW); break;
   case CHI_EVENT_HEAP_LIMIT: WPAYLOAD(HeapLimit, &e->payload->HEAP_LIMIT); break;
   case CHI_EVENT_HEAP_USAGE: WPAYLOAD(HeapUsage, &e->payload->HEAP_USAGE); break;
   case CHI_EVENT_LOG_BEGIN: break;
   case CHI_EVENT_LOG_END: break;
   case CHI_EVENT_MODULE_INIT: WPAYLOAD(ModuleInit, &e->payload->MODULE_INIT); break;
   case CHI_EVENT_MODULE_LOAD: WPAYLOAD(ModuleLoad, &e->payload->MODULE_LOAD); break;
   case CHI_EVENT_MODULE_UNLOAD: WPAYLOAD(ModuleName, &e->payload->MODULE_UNLOAD); break;
   case CHI_EVENT_PROC_DESTROY: break;
   case CHI_EVENT_PROC_INIT: break;
   case CHI_EVENT_PROC_MSG_RECV: WPAYLOAD(ProcMsgRecv, &e->payload->PROC_MSG_RECV); break;
   case CHI_EVENT_PROC_MSG_SEND: WPAYLOAD(ProcMsgSend, &e->payload->PROC_MSG_SEND); break;
   case CHI_EVENT_PROC_REQUEST: WPAYLOAD(ProcRequest, &e->payload->PROC_REQUEST); break;
   case CHI_EVENT_PROC_STALL: WPAYLOAD(ProcStall, &e->payload->PROC_STALL); break;
   case CHI_EVENT_PROC_SUSPEND: WPAYLOAD(ProcSuspend, &e->payload->PROC_SUSPEND); break;
   case CHI_EVENT_PROF_DISABLED: break;
   case CHI_EVENT_PROF_ENABLED: break;
   case CHI_EVENT_PROF_TRACE: WPAYLOAD(StackTrace, &e->payload->PROF_TRACE); break;
   case CHI_EVENT_SIGNAL: WPAYLOAD(Signal, &e->payload->SIGNAL); break;
   case CHI_EVENT_STACK_ACTIVATE: WPAYLOAD(StackActive, &e->payload->STACK_ACTIVATE); break;
   case CHI_EVENT_STACK_DEACTIVATE: WPAYLOAD(StackActive, &e->payload->STACK_DEACTIVATE); break;
   case CHI_EVENT_STACK_RESIZE: WPAYLOAD(StackSize, &e->payload->STACK_RESIZE); break;
   case CHI_EVENT_STACK_TRACE: WPAYLOAD(StackTrace, &e->payload->STACK_TRACE); break;
   case CHI_EVENT_STRBUILDER_OVERFLOW: break;
   case CHI_EVENT_SYSTEM_STATS: WPAYLOAD(SystemStats, &e->payload->SYSTEM_STATS); break;
   case CHI_EVENT_THREAD_ENQUEUE: WPAYLOAD(ThreadEnqueue, &e->payload->THREAD_ENQUEUE); break;
   case CHI_EVENT_THREAD_MIGRATE: WPAYLOAD(ThreadMigrate, &e->payload->THREAD_MIGRATE); break;
   case CHI_EVENT_THREAD_NAME: WPAYLOAD(ThreadName, &e->payload->THREAD_NAME); break;
   case CHI_EVENT_THREAD_NEW: WPAYLOAD(ThreadNew, &e->payload->THREAD_NEW); break;
   case CHI_EVENT_THREAD_SWITCH: WPAYLOAD(ThreadNext, &e->payload->THREAD_SWITCH); break;
   case CHI_EVENT_THREAD_TAKEOVER: WPAYLOAD(ThreadMigrate, &e->payload->THREAD_TAKEOVER); break;
   case CHI_EVENT_THREAD_TERMINATED: break;
   case CHI_EVENT_THREAD_YIELD: WPAYLOAD(ThreadYield, &e->payload->THREAD_YIELD); break;
   case CHI_EVENT_TICK: break;
   case CHI_EVENT_USER_BUFFER: WPAYLOAD(UserBuffer, &e->payload->USER_BUFFER); break;
   case CHI_EVENT_USER_STRING: WPAYLOAD(UserString, &e->payload->USER_STRING); break;
   case CHI_EVENT_WORKER_DESTROY: break;
   case CHI_EVENT_WORKER_INIT: break;
   case CHI_EVENT_WORKER_NAME: WPAYLOAD(WorkerName, &e->payload->WORKER_NAME); break;
   default: break;
   }
WEVENT_END

#undef WBLOCK_BEGIN
#undef WBLOCK_END
#undef WBOOL
#undef WBYTES
#undef WENUM
#undef WEVENT_BEGIN
#undef WEVENT_END
#undef WFIELD
#undef WDEC
#undef WHEX
#undef WPAYLOAD
#undef WPAYLOAD_BEGIN
#undef WPAYLOAD_END
#undef WSTR
