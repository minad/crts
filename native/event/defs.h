// Generated by generate.pl from defs.in
#pragma once

#include <chili/object/string.h>

typedef struct ChiRuntime_   ChiRuntime;
typedef struct ChiWorker_    ChiWorker;
typedef struct ChiProcessor_ ChiProcessor;

enum {
   CHI_EVENT_VERSION = 1
};

CHI_NEWTYPE(Micros, uint64_t)
CHI_NEWTYPE(Nanos,  uint64_t)
CHI_NEWTYPE(Millis, uint64_t)
CHI_NEWTYPE(Secs,   uint64_t)

typedef struct {
    uint32_t version;
} ChiEventVersion;

typedef struct ChiLocInfo_ {
    ChiStringRef module;
    ChiStringRef fn;
    ChiStringRef file;
    size_t       size;
    uint32_t     line;
    bool         interp;
} ChiLocInfo;

typedef struct ChiActivity_ {
    ChiNanos cpuTimeUser;
    ChiNanos cpuTimeSystem;
    size_t   residentSize;
    uint64_t pageFault;
    uint64_t pageSwap;
    uint64_t contextSwitch;
    uint64_t diskRead;
    uint64_t diskWrite;
} ChiActivity;

typedef struct {
    size_t   allocSinceSweep;
    uint64_t allocSinceStart;
    size_t   totalWords;
} ChiHeapClassUsage;

typedef struct {
    ChiHeapClassUsage small;
    ChiHeapClassUsage medium;
    ChiHeapClassUsage large;
} ChiHeapUsage;

typedef struct {
    size_t count;
    size_t words;
} ChiObjectCount;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
    ChiObjectCount copied1;
} ChiScavengerObjectCount;

typedef struct {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerRawCount;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
} ChiScavengerDirtyCount;

typedef struct {
    ChiScavengerDirtyCount  dirty;
    ChiScavengerRawCount    raw;
    ChiScavengerObjectCount object;
    size_t                  collapsed;
    uint32_t                gen;
    bool                    snapshot;
} ChiScavengerStats;

typedef struct {
    ChiObjectCount live;
    ChiObjectCount free;
} ChiSweepClassStats;

typedef struct {
    ChiSweepClassStats small;
    ChiSweepClassStats medium;
    ChiSweepClassStats large;
} ChiSweepStats;

typedef struct {
    ChiObjectCount object;
    ChiObjectCount stack;
    size_t         collapsed;
} ChiScanStats;

typedef struct {
    size_t usedWords;
    size_t totalWords;
} ChiMinorUsage;

typedef struct {
    ChiStringRef trace;
} ChiEventStackTrace;

typedef struct {
    ChiStringRef name;
} ChiEventTraceFFI;

typedef struct {
    ChiStringRef name;
    ChiStringRef trace;
} ChiEventException;

typedef struct {
    uint32_t     tid;
    ChiStringRef name;
} ChiEventThreadName;

typedef struct {
    uint32_t tid;
    uint32_t count;
} ChiEventThreadNew;

typedef struct {
    uint32_t count;
} ChiEventThreadTerm;

typedef struct {
    ChiStringRef name;
} ChiEventWorkerName;

typedef struct {
    ChiStringRef data;
} ChiEventUser;

typedef struct {
    ChiStringRef file;
} ChiEventHeapDump;

typedef struct ChiHeapProf_ {
    ChiObjectCount array;
    ChiObjectCount bigint;
    ChiObjectCount box64;
    ChiObjectCount buffer;
    ChiObjectCount data;
    ChiObjectCount ffi;
    ChiObjectCount fn;
    ChiObjectCount raw;
    ChiObjectCount stack;
    ChiObjectCount string;
    ChiObjectCount stringbuilder;
    ChiObjectCount thread;
    ChiObjectCount thunk;
} ChiHeapProf;

typedef struct {
    size_t reqSize;
    size_t oldSize;
    size_t newSize;
    size_t usedSize;
} ChiEventStackSize;

typedef struct {
    size_t oldLimit;
    size_t newLimit;
} ChiEventNursery;

typedef struct {
    size_t    heapSize;
    size_t    size;
    size_t    align;
    uintptr_t start;
} ChiEventChunk;

typedef struct {
    ChiStringRef module;
    ChiStringRef name;
} ChiEventFFI;

typedef struct {
    ChiStringRef module;
    ChiStringRef file;
    ChiStringRef path;
} ChiEventModuleLoad;

typedef struct {
    ChiStringRef module;
} ChiEventModuleName;

typedef enum {
    CHI_SIG_INTERRUPT,
    CHI_SIG_DUMPSTACK,
    CHI_SIG_DUMPHEAP,
    _CHI_SIG_MAX = CHI_SIG_DUMPHEAP,
} ChiSig;

typedef struct {
    ChiSig   sig;
} ChiEventSignal;

typedef enum {
    CHI_GC_REQUESTOR_BLOCKMAN,
    CHI_GC_REQUESTOR_HEAP,
    CHI_GC_REQUESTOR_USER,
    CHI_GC_REQUESTOR_RUNTIME,
    CHI_GC_REQUESTOR_SIG,
} ChiGCRequestor;

typedef enum {
    CHI_GC_TRIGGER_INACTIVE,
    CHI_GC_TRIGGER_SLICE,
    CHI_GC_TRIGGER_MARKSWEEP,
    CHI_GC_TRIGGER_FULL,
} ChiGCTrigger;

typedef enum {
    CHI_HEAP_LIMIT_ALLOC,
    CHI_HEAP_LIMIT_SOFT,
    CHI_HEAP_LIMIT_HARD,
} ChiHeapLimit;

typedef struct {
    ChiGCTrigger   trigger;
} ChiEventGCSlice;

typedef struct {
    ChiGCTrigger   trigger;
    ChiGCRequestor requestor;
} ChiEventGCRequest;

typedef struct {
    ChiHeapLimit limit;
    size_t heapSize;
    size_t softLimit;
    size_t hardLimit;
} ChiEventHeapLimit;

typedef struct {
    ChiStringRef type;
    size_t       size;
} ChiEventHeapAlloc;

typedef struct {
    size_t count;
} ChiEventBlackhole;

typedef struct {
    uint32_t count;
} ChiEventResumeReq;

typedef struct {
    ChiHeapUsage  major;
    ChiMinorUsage minor;
    size_t        totalWords;
} ChiEventHeapUsage;

typedef ChiHeapProf       ChiEventHeapProf;
typedef ChiActivity       ChiEventActivity;
typedef ChiLocInfo        ChiEventTrace;
typedef ChiSweepStats     ChiEventSweep;
typedef ChiScavengerStats ChiEventScavenger;
typedef ChiScanStats      ChiEventMark;

#define _CHI_EVENT_DESC \
  const char* const chiEventName[] = { \
  "BEGIN", \
  "END", \
  "PROC_INIT", \
  "PROC_DESTROY", \
  "PROC_RESUME_REQ", \
  "PROC_TICK", \
  "WORKER_INIT", \
  "WORKER_DESTROY", \
  "WORKER_NAME", \
  "MODULE_LOAD", \
  "MODULE_UNLOAD", \
  "MODULE_INIT", \
  "FFI_LOAD", \
  "TRACE_FFI", \
  "TRACE_ENTER", \
  "TRACE_LEAVE", \
  "TRACE_ENTER_JMP", \
  "EXCEPTION_HANDLED", \
  "EXCEPTION_UNHANDLED", \
  "GC_BLOCK", \
  "GC_UNBLOCK", \
  "GC_REQ", \
  "GC_MARK_STATS", \
  "GC_SWEEP_STATS", \
  "GC_SWEEP_NOTIFY", \
  "NURSERY_RESIZE", \
  "HEAP_BEFORE_SCAV", \
  "HEAP_AFTER_SCAV", \
  "BLOCK_CHUNK_NEW", \
  "BLOCK_CHUNK_FREE", \
  "HEAP_CHUNK_NEW", \
  "HEAP_CHUNK_FREE", \
  "HEAP_LIMIT", \
  "HEAP_ALLOC_FAILED", \
  "PAR", \
  "STACK_GROW", \
  "STACK_SHRINK", \
  "STACK_TRACE", \
  "STACK_BLACKHOLE", \
  "PROF_TRACE", \
  "PROF_ENABLED", \
  "PROF_DISABLED", \
  "THREAD_NAME", \
  "THREAD_NEW", \
  "THREAD_TERMINATED", \
  "THREAD_BLACKHOLE", \
  "BIGINT_OVERFLOW", \
  "STRBUILDER_OVERFLOW", \
  "TICK", \
  "SIGNAL", \
  "ACTIVITY", \
  "USER", \
  "HEAP_CHECK", \
  "HEAP_CHECK", \
  "HEAP_DUMP", \
  "HEAP_DUMP", \
  "HEAP_PROF", \
  "HEAP_PROF", \
  "GC_SLICE", \
  "GC_SLICE", \
  "GC_MARKSWEEP", \
  "GC_MARKSWEEP", \
  "GC_MARK_PHASE", \
  "GC_MARK_PHASE", \
  "GC_MARK_SLICE", \
  "GC_MARK_SLICE", \
  "GC_SWEEP_PHASE", \
  "GC_SWEEP_PHASE", \
  "GC_SWEEP_SLICE", \
  "GC_SWEEP_SLICE", \
  "GC_SCAVENGER", \
  "GC_SCAVENGER", \
  "PROC_RUN", \
  "PROC_RUN", \
  "PROC_SUSPEND", \
  "PROC_SUSPEND", \
  "PROC_WAIT_SYNC", \
  "PROC_WAIT_SYNC", \
  "PROC_SYNC", \
  "PROC_SYNC", \
  "THREAD_SCHED", \
  "THREAD_SCHED", \
  "THREAD_RUN", \
  "THREAD_RUN", \
  "USER_DURATION", \
  "USER_DURATION", \
  "STARTUP", \
  "STARTUP", \
  "SHUTDOWN", \
  "SHUTDOWN" }; \
  static const struct CHI_PACKED { \
    bool           payload : 1; \
    EventClass     cls     : 2; \
    EventContext   ctx     : 2; \
    uint8_t        stats   : 8; \
    uint8_t        _pad    : 3; \
  } eventDesc[] = { { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_PROC_INIT, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_EXCEPTION_HANDLED, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_EXCEPTION_UNHANDLED, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_PAR, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_STACK_GROW, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_STACK_SHRINK, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_WORKER, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_PROCESSOR, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_THREAD_NEW, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_THREAD_TERMINATED, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_RUNTIME, .cls = CLASS_INSTANT }, \
  { .payload = 1, .stats = ISTATS_NONE, .ctx = CTX_THREAD, .cls = CLASS_INSTANT }, \
  { .payload = 0, .stats = DSTATS_HEAP_CHECK, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_HEAP_CHECK, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 1, .stats = DSTATS_HEAP_DUMP, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 1, .stats = DSTATS_HEAP_DUMP, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 1, .stats = DSTATS_HEAP_PROF, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 1, .stats = DSTATS_HEAP_PROF, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 1, .stats = DSTATS_GC_SLICE, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 1, .stats = DSTATS_GC_SLICE, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_GC_MARKSWEEP, .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_GC_MARKSWEEP, .ctx = CTX_RUNTIME, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_GC_MARK_PHASE, .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_GC_MARK_PHASE, .ctx = CTX_RUNTIME, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_GC_MARK_SLICE, .ctx = CTX_WORKER, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_GC_MARK_SLICE, .ctx = CTX_WORKER, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_GC_SWEEP_PHASE, .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_GC_SWEEP_PHASE, .ctx = CTX_RUNTIME, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_GC_SWEEP_SLICE, .ctx = CTX_WORKER, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_GC_SWEEP_SLICE, .ctx = CTX_WORKER, .cls = CLASS_END }, \
  { .payload = 1, .stats = DSTATS_GC_SCAVENGER, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 1, .stats = DSTATS_GC_SCAVENGER, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_PROC_RUN, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_PROC_RUN, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_PROC_SUSPEND, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_PROC_SUSPEND, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_PROC_WAIT_SYNC, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_PROC_WAIT_SYNC, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_PROC_SYNC, .ctx = CTX_PROCESSOR, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_PROC_SYNC, .ctx = CTX_PROCESSOR, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_THREAD_SCHED, .ctx = CTX_THREAD, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_THREAD_SCHED, .ctx = CTX_THREAD, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_THREAD_RUN, .ctx = CTX_THREAD, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_THREAD_RUN, .ctx = CTX_THREAD, .cls = CLASS_END }, \
  { .payload = 1, .stats = DSTATS_USER_DURATION, .ctx = CTX_THREAD, .cls = CLASS_BEGIN }, \
  { .payload = 1, .stats = DSTATS_USER_DURATION, .ctx = CTX_THREAD, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_STARTUP, .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_STARTUP, .ctx = CTX_RUNTIME, .cls = CLASS_END }, \
  { .payload = 0, .stats = DSTATS_SHUTDOWN, .ctx = CTX_RUNTIME, .cls = CLASS_BEGIN }, \
  { .payload = 0, .stats = DSTATS_SHUTDOWN, .ctx = CTX_RUNTIME, .cls = CLASS_END } }; \
  static const char* const enumChiSig[] = {"SIG_INTERRUPT","SIG_DUMPSTACK","SIG_DUMPHEAP",}; \
  static const char* const enumChiGCRequestor[] = {"GC_REQUESTOR_BLOCKMAN","GC_REQUESTOR_HEAP","GC_REQUESTOR_USER","GC_REQUESTOR_RUNTIME","GC_REQUESTOR_SIG",}; \
  static const char* const enumChiGCTrigger[] = {"GC_TRIGGER_INACTIVE","GC_TRIGGER_SLICE","GC_TRIGGER_MARKSWEEP","GC_TRIGGER_FULL",}; \
  static const char* const enumChiHeapLimit[] = {"HEAP_LIMIT_ALLOC","HEAP_LIMIT_SOFT","HEAP_LIMIT_HARD",};

#define _CHI_EVENT_DSTATS \
  DSTATS_HEAP_CHECK, \
  DSTATS_HEAP_DUMP, \
  DSTATS_HEAP_PROF, \
  DSTATS_GC_SLICE, \
  DSTATS_GC_MARKSWEEP, \
  DSTATS_GC_MARK_PHASE, \
  DSTATS_GC_MARK_SLICE, \
  DSTATS_GC_SWEEP_PHASE, \
  DSTATS_GC_SWEEP_SLICE, \
  DSTATS_GC_SCAVENGER, _END_STATS_GC_SCAVENGER = DSTATS_GC_SCAVENGER + 1+CHI_GEN_MAX - 1, \
  DSTATS_PROC_RUN, \
  DSTATS_PROC_SUSPEND, \
  DSTATS_PROC_WAIT_SYNC, \
  DSTATS_PROC_SYNC, \
  DSTATS_THREAD_SCHED, \
  DSTATS_THREAD_RUN, \
  DSTATS_USER_DURATION, \
  DSTATS_STARTUP, \
  DSTATS_SHUTDOWN

#define _CHI_EVENT_ISTATS \
  ISTATS_PROC_INIT, \
  ISTATS_EXCEPTION_HANDLED, \
  ISTATS_EXCEPTION_UNHANDLED, \
  ISTATS_PAR, \
  ISTATS_STACK_GROW, \
  ISTATS_STACK_SHRINK, \
  ISTATS_THREAD_NEW, \
  ISTATS_THREAD_TERMINATED

enum {
  _CHI_EVENT_COUNT = 90,
  _CHI_EVENT_MAXLEN = 19,
};

typedef enum {
  CHI_EVENT_BEGIN,
  CHI_EVENT_END,
  CHI_EVENT_PROC_INIT,
  CHI_EVENT_PROC_DESTROY,
  CHI_EVENT_PROC_RESUME_REQ,
  CHI_EVENT_PROC_TICK,
  CHI_EVENT_WORKER_INIT,
  CHI_EVENT_WORKER_DESTROY,
  CHI_EVENT_WORKER_NAME,
  CHI_EVENT_MODULE_LOAD,
  CHI_EVENT_MODULE_UNLOAD,
  CHI_EVENT_MODULE_INIT,
  CHI_EVENT_FFI_LOAD,
  CHI_EVENT_TRACE_FFI,
  CHI_EVENT_TRACE_ENTER,
  CHI_EVENT_TRACE_LEAVE,
  CHI_EVENT_TRACE_ENTER_JMP,
  CHI_EVENT_EXCEPTION_HANDLED,
  CHI_EVENT_EXCEPTION_UNHANDLED,
  CHI_EVENT_GC_BLOCK,
  CHI_EVENT_GC_UNBLOCK,
  CHI_EVENT_GC_REQ,
  CHI_EVENT_GC_MARK_STATS,
  CHI_EVENT_GC_SWEEP_STATS,
  CHI_EVENT_GC_SWEEP_NOTIFY,
  CHI_EVENT_NURSERY_RESIZE,
  CHI_EVENT_HEAP_BEFORE_SCAV,
  CHI_EVENT_HEAP_AFTER_SCAV,
  CHI_EVENT_BLOCK_CHUNK_NEW,
  CHI_EVENT_BLOCK_CHUNK_FREE,
  CHI_EVENT_HEAP_CHUNK_NEW,
  CHI_EVENT_HEAP_CHUNK_FREE,
  CHI_EVENT_HEAP_LIMIT,
  CHI_EVENT_HEAP_ALLOC_FAILED,
  CHI_EVENT_PAR,
  CHI_EVENT_STACK_GROW,
  CHI_EVENT_STACK_SHRINK,
  CHI_EVENT_STACK_TRACE,
  CHI_EVENT_STACK_BLACKHOLE,
  CHI_EVENT_PROF_TRACE,
  CHI_EVENT_PROF_ENABLED,
  CHI_EVENT_PROF_DISABLED,
  CHI_EVENT_THREAD_NAME,
  CHI_EVENT_THREAD_NEW,
  CHI_EVENT_THREAD_TERMINATED,
  CHI_EVENT_THREAD_BLACKHOLE,
  CHI_EVENT_BIGINT_OVERFLOW,
  CHI_EVENT_STRBUILDER_OVERFLOW,
  CHI_EVENT_TICK,
  CHI_EVENT_SIGNAL,
  CHI_EVENT_ACTIVITY,
  CHI_EVENT_USER,
  CHI_EVENT_HEAP_CHECK_BEGIN,
  CHI_EVENT_HEAP_CHECK_END,
  CHI_EVENT_HEAP_DUMP_BEGIN,
  CHI_EVENT_HEAP_DUMP_END,
  CHI_EVENT_HEAP_PROF_BEGIN,
  CHI_EVENT_HEAP_PROF_END,
  CHI_EVENT_GC_SLICE_BEGIN,
  CHI_EVENT_GC_SLICE_END,
  CHI_EVENT_GC_MARKSWEEP_BEGIN,
  CHI_EVENT_GC_MARKSWEEP_END,
  CHI_EVENT_GC_MARK_PHASE_BEGIN,
  CHI_EVENT_GC_MARK_PHASE_END,
  CHI_EVENT_GC_MARK_SLICE_BEGIN,
  CHI_EVENT_GC_MARK_SLICE_END,
  CHI_EVENT_GC_SWEEP_PHASE_BEGIN,
  CHI_EVENT_GC_SWEEP_PHASE_END,
  CHI_EVENT_GC_SWEEP_SLICE_BEGIN,
  CHI_EVENT_GC_SWEEP_SLICE_END,
  CHI_EVENT_GC_SCAVENGER_BEGIN,
  CHI_EVENT_GC_SCAVENGER_END,
  CHI_EVENT_PROC_RUN_BEGIN,
  CHI_EVENT_PROC_RUN_END,
  CHI_EVENT_PROC_SUSPEND_BEGIN,
  CHI_EVENT_PROC_SUSPEND_END,
  CHI_EVENT_PROC_WAIT_SYNC_BEGIN,
  CHI_EVENT_PROC_WAIT_SYNC_END,
  CHI_EVENT_PROC_SYNC_BEGIN,
  CHI_EVENT_PROC_SYNC_END,
  CHI_EVENT_THREAD_SCHED_BEGIN,
  CHI_EVENT_THREAD_SCHED_END,
  CHI_EVENT_THREAD_RUN_BEGIN,
  CHI_EVENT_THREAD_RUN_END,
  CHI_EVENT_USER_DURATION_BEGIN,
  CHI_EVENT_USER_DURATION_END,
  CHI_EVENT_STARTUP_BEGIN,
  CHI_EVENT_STARTUP_END,
  CHI_EVENT_SHUTDOWN_BEGIN,
  CHI_EVENT_SHUTDOWN_END,
} ChiEvent;

typedef union {
    const void* ANY;
  const ChiEventVersion* BEGIN;
  const ChiEventResumeReq* PROC_RESUME_REQ;
  const ChiEventWorkerName* WORKER_NAME;
  const ChiEventModuleLoad* MODULE_LOAD;
  const ChiEventModuleName* MODULE_UNLOAD;
  const ChiEventModuleName* MODULE_INIT;
  const ChiEventFFI* FFI_LOAD;
  const ChiEventTraceFFI* TRACE_FFI;
  const ChiEventTrace* TRACE_ENTER;
  const ChiEventTrace* TRACE_LEAVE;
  const ChiEventTrace* TRACE_ENTER_JMP;
  const ChiEventException* EXCEPTION_HANDLED;
  const ChiEventException* EXCEPTION_UNHANDLED;
  const ChiEventGCRequest* GC_REQ;
  const ChiEventMark* GC_MARK_STATS;
  const ChiEventSweep* GC_SWEEP_STATS;
  const ChiEventNursery* NURSERY_RESIZE;
  const ChiEventHeapUsage* HEAP_BEFORE_SCAV;
  const ChiEventHeapUsage* HEAP_AFTER_SCAV;
  const ChiEventChunk* BLOCK_CHUNK_NEW;
  const ChiEventChunk* BLOCK_CHUNK_FREE;
  const ChiEventChunk* HEAP_CHUNK_NEW;
  const ChiEventChunk* HEAP_CHUNK_FREE;
  const ChiEventHeapLimit* HEAP_LIMIT;
  const ChiEventHeapAlloc* HEAP_ALLOC_FAILED;
  const ChiEventStackSize* STACK_GROW;
  const ChiEventStackSize* STACK_SHRINK;
  const ChiEventStackTrace* STACK_TRACE;
  const ChiEventBlackhole* STACK_BLACKHOLE;
  const ChiEventStackTrace* PROF_TRACE;
  const ChiEventThreadName* THREAD_NAME;
  const ChiEventThreadNew* THREAD_NEW;
  const ChiEventThreadTerm* THREAD_TERMINATED;
  const ChiEventSignal* SIGNAL;
  const ChiEventActivity* ACTIVITY;
  const ChiEventUser* USER;
  const ChiEventHeapDump* HEAP_DUMP_END;
  const ChiEventHeapProf* HEAP_PROF_END;
  const ChiEventGCSlice* GC_SLICE_END;
  const ChiEventScavenger* GC_SCAVENGER_END;
  const ChiEventUser* USER_DURATION_END;
} ChiEventData;

typedef ChiRuntime _CHI_EVENT_CTX_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_END;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_INIT;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_DESTROY;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_RESUME_REQ;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_TICK;
typedef ChiWorker _CHI_EVENT_CTX_WORKER_INIT;
typedef ChiWorker _CHI_EVENT_CTX_WORKER_DESTROY;
typedef ChiWorker _CHI_EVENT_CTX_WORKER_NAME;
typedef ChiProcessor _CHI_EVENT_CTX_MODULE_LOAD;
typedef ChiProcessor _CHI_EVENT_CTX_MODULE_UNLOAD;
typedef ChiProcessor _CHI_EVENT_CTX_MODULE_INIT;
typedef ChiProcessor _CHI_EVENT_CTX_FFI_LOAD;
typedef ChiProcessor _CHI_EVENT_CTX_TRACE_FFI;
typedef ChiProcessor _CHI_EVENT_CTX_TRACE_ENTER;
typedef ChiProcessor _CHI_EVENT_CTX_TRACE_LEAVE;
typedef ChiProcessor _CHI_EVENT_CTX_TRACE_ENTER_JMP;
typedef ChiProcessor _CHI_EVENT_CTX_EXCEPTION_HANDLED;
typedef ChiProcessor _CHI_EVENT_CTX_EXCEPTION_UNHANDLED;
typedef ChiProcessor _CHI_EVENT_CTX_GC_BLOCK;
typedef ChiProcessor _CHI_EVENT_CTX_GC_UNBLOCK;
typedef ChiRuntime _CHI_EVENT_CTX_GC_REQ;
typedef ChiWorker _CHI_EVENT_CTX_GC_MARK_STATS;
typedef ChiWorker _CHI_EVENT_CTX_GC_SWEEP_STATS;
typedef ChiRuntime _CHI_EVENT_CTX_GC_SWEEP_NOTIFY;
typedef ChiProcessor _CHI_EVENT_CTX_NURSERY_RESIZE;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_BEFORE_SCAV;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_AFTER_SCAV;
typedef ChiRuntime _CHI_EVENT_CTX_BLOCK_CHUNK_NEW;
typedef ChiRuntime _CHI_EVENT_CTX_BLOCK_CHUNK_FREE;
typedef ChiRuntime _CHI_EVENT_CTX_HEAP_CHUNK_NEW;
typedef ChiRuntime _CHI_EVENT_CTX_HEAP_CHUNK_FREE;
typedef ChiRuntime _CHI_EVENT_CTX_HEAP_LIMIT;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_ALLOC_FAILED;
typedef ChiProcessor _CHI_EVENT_CTX_PAR;
typedef ChiProcessor _CHI_EVENT_CTX_STACK_GROW;
typedef ChiProcessor _CHI_EVENT_CTX_STACK_SHRINK;
typedef ChiProcessor _CHI_EVENT_CTX_STACK_TRACE;
typedef ChiProcessor _CHI_EVENT_CTX_STACK_BLACKHOLE;
typedef ChiWorker _CHI_EVENT_CTX_PROF_TRACE;
typedef ChiWorker _CHI_EVENT_CTX_PROF_ENABLED;
typedef ChiWorker _CHI_EVENT_CTX_PROF_DISABLED;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_NAME;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_NEW;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_TERMINATED;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_BLACKHOLE;
typedef ChiProcessor _CHI_EVENT_CTX_BIGINT_OVERFLOW;
typedef ChiProcessor _CHI_EVENT_CTX_STRBUILDER_OVERFLOW;
typedef ChiRuntime _CHI_EVENT_CTX_TICK;
typedef ChiRuntime _CHI_EVENT_CTX_SIGNAL;
typedef ChiRuntime _CHI_EVENT_CTX_ACTIVITY;
typedef ChiProcessor _CHI_EVENT_CTX_USER;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_CHECK_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_CHECK_END;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_DUMP_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_DUMP_END;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_PROF_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_HEAP_PROF_END;
typedef ChiProcessor _CHI_EVENT_CTX_GC_SLICE_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_GC_SLICE_END;
typedef ChiRuntime _CHI_EVENT_CTX_GC_MARKSWEEP_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_GC_MARKSWEEP_END;
typedef ChiRuntime _CHI_EVENT_CTX_GC_MARK_PHASE_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_GC_MARK_PHASE_END;
typedef ChiWorker _CHI_EVENT_CTX_GC_MARK_SLICE_BEGIN;
typedef ChiWorker _CHI_EVENT_CTX_GC_MARK_SLICE_END;
typedef ChiRuntime _CHI_EVENT_CTX_GC_SWEEP_PHASE_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_GC_SWEEP_PHASE_END;
typedef ChiWorker _CHI_EVENT_CTX_GC_SWEEP_SLICE_BEGIN;
typedef ChiWorker _CHI_EVENT_CTX_GC_SWEEP_SLICE_END;
typedef ChiProcessor _CHI_EVENT_CTX_GC_SCAVENGER_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_GC_SCAVENGER_END;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_RUN_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_RUN_END;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_SUSPEND_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_SUSPEND_END;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_WAIT_SYNC_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_WAIT_SYNC_END;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_SYNC_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_PROC_SYNC_END;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_SCHED_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_SCHED_END;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_RUN_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_THREAD_RUN_END;
typedef ChiProcessor _CHI_EVENT_CTX_USER_DURATION_BEGIN;
typedef ChiProcessor _CHI_EVENT_CTX_USER_DURATION_END;
typedef ChiRuntime _CHI_EVENT_CTX_STARTUP_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_STARTUP_END;
typedef ChiRuntime _CHI_EVENT_CTX_SHUTDOWN_BEGIN;
typedef ChiRuntime _CHI_EVENT_CTX_SHUTDOWN_END;
