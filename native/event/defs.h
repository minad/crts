// Generated by generate.pl from defs.in
#pragma once

#include "../private.h"

typedef struct ChiRuntime_   ChiRuntime;
typedef struct ChiWorker_    ChiWorker;
typedef struct ChiProcessor_ ChiProcessor;

CHI_NEWTYPE(Micros, uint64_t)
CHI_NEWTYPE(Nanos,  uint64_t)
CHI_NEWTYPE(Millis, uint64_t)
CHI_NEWTYPE(Secs,   uint64_t)
typedef uint32_t ChiWid;

typedef struct CHI_ALIGNED(8) {
    uint32_t newTid;
    uintptr_t newStack;
} ChiEventThreadNew;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef fn;
    ChiStringRef file;
    size_t       size;
    uint32_t     line;
    bool         interp;
} ChiLocInfo;

typedef struct CHI_ALIGNED(8) {
    ChiNanos cpuTimeUser;
    ChiNanos cpuTimeSystem;
    size_t   maxResidentSize;
    size_t   currResidentSize;
    uint64_t pageFault;
    uint64_t voluntaryContextSwitch;
    uint64_t involuntaryContextSwitch;
} ChiSystemStats;

typedef struct CHI_ALIGNED(8) {
    uint64_t allocSize;
    size_t   totalSize;
} ChiHeapClassUsage;

typedef struct CHI_ALIGNED(8) {
    ChiHeapClassUsage small;
    ChiHeapClassUsage medium;
    ChiHeapClassUsage large;
    size_t            totalSize;
} ChiHeapUsage;

typedef struct CHI_ALIGNED(8) {
    size_t count;
    size_t words;
} ChiObjectCount;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount copied;
    ChiObjectCount scanned;
    size_t         thunk;
} ChiPromoteStats;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerObjectCount;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount promoted;
    ChiObjectCount copied;
} ChiScavengerRawCount;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount object;
    ChiObjectCount stack;
    ChiObjectCount card;
} ChiScavengerDirtyCount;

typedef struct CHI_ALIGNED(8) {
    size_t usedSize;
    size_t totalSize;
} ChiMinorHeapUsage;

typedef struct CHI_ALIGNED(8) {
    ChiScavengerDirtyCount  dirty;
    ChiScavengerRawCount    raw;
    ChiScavengerObjectCount object;
    size_t                  collapsed;
    uint32_t                aging;
    bool                    snapshot;
} ChiScavengerStats;

typedef struct CHI_ALIGNED(8) {
    ChiPromoteStats   promoted;
    ChiScavengerStats scavenger;
    ChiMinorHeapUsage minorHeapBefore;
    ChiMinorHeapUsage minorHeapAfter;
} ChiEventScavenger;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount alive;
    ChiObjectCount garbage;
} ChiSweepClassStats;

typedef struct CHI_ALIGNED(8) {
    ChiSweepClassStats small;
    ChiSweepClassStats medium;
    ChiSweepClassStats large;
} ChiSweepStats;

typedef struct CHI_ALIGNED(8) {
    ChiObjectCount object;
    ChiObjectCount stack;
    size_t         collapsed;
} ChiScanStats;

typedef struct CHI_ALIGNED(8) {
    uintptr_t stack;
    size_t size;
    size_t step;
    size_t copied;
} ChiEventStackSize;

typedef struct CHI_ALIGNED(8) {
    uintptr_t stack;
    ChiStringRef trace;
} ChiEventStackTrace;

typedef struct CHI_ALIGNED(8) {
    uintptr_t stack;
} ChiEventStack;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef name;
} ChiEventFnLogFFI;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef name;
    ChiStringRef trace;
} ChiEventException;

typedef enum {
    CHI_REQUEST_EXIT,
    CHI_REQUEST_DUMP,
    CHI_REQUEST_NOTIFYINTERRUPT,
    CHI_REQUEST_TIMERINTERRUPT,
    CHI_REQUEST_USERINTERRUPT,
    CHI_REQUEST_HANDSHAKE,
    CHI_REQUEST_SCAVENGE,
    CHI_REQUEST_PROMOTE,
} ChiProcessorRequest;

typedef struct CHI_ALIGNED(8) {
    ChiProcessorRequest request;
} ChiEventProcRequest;

typedef enum {
    CHI_MessageEnqueue,
    CHI_MessageEnqueueRunning,
    CHI_MessageInterrupt,
    CHI_MessageMigrate,
} ChiProcessorMessage;

typedef struct CHI_ALIGNED(8) {
    ChiWid receiverWid;
    ChiProcessorMessage message;
} ChiEventProcMsgSend;

typedef struct CHI_ALIGNED(8) {
    ChiProcessorMessage message;
} ChiEventProcMsgRecv;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef name;
} ChiEventWorkerName;

typedef struct CHI_ALIGNED(8) {
    ChiBytesRef buffer;
} ChiEventUserBuffer;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef string;
} ChiEventUserString;

typedef struct CHI_ALIGNED(8) {
    size_t    heapSize;
    size_t    size;
    size_t    align;
    uintptr_t start;
} ChiEventChunk;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef module;
    ChiStringRef name;
} ChiEventFFI;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef module;
    ChiStringRef file;
    ChiStringRef path;
} ChiEventModuleLoad;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef module;
} ChiEventModuleName;

typedef enum {
    CHI_SIG_USERINTERRUPT,
    CHI_SIG_DUMP
} ChiSig;

typedef struct CHI_ALIGNED(8) {
    ChiSig sig;
} ChiEventSignal;

typedef enum {
    CHI_GC_IDLE,
    CHI_GC_SYNC1,
    CHI_GC_SYNC2,
    CHI_GC_ASYNC,
} ChiGCPhase;

typedef struct CHI_ALIGNED(8) {
    ChiStringRef type;
    size_t       size;
} ChiEventHeapAlloc;

typedef struct CHI_ALIGNED(8) {
    ChiWid notifyWid;
} ChiEventProcNotify;

typedef struct CHI_ALIGNED(8) {
    uint32_t ms;
} ChiEventProcSuspend;

typedef enum {
    CHI_Running,
    CHI_Terminated,
    CHI_WaitSleep,
    CHI_WaitVarPut,
    CHI_WaitVarTake,
} ChiThreadPhase;

typedef struct CHI_ALIGNED(8) {
    ChiThreadPhase phase;
} ChiEventThreadYield;

typedef struct CHI_ALIGNED(8) {
    uint32_t nextTid;
} ChiEventThreadNext;

typedef struct CHI_ALIGNED(8) {
    uint32_t       enqTid;
    ChiThreadPhase phase;
} ChiEventThreadEnqueue;

typedef struct CHI_ALIGNED(8) {
    uint32_t     nameTid;
    ChiStringRef name;
} ChiEventThreadName;

typedef struct CHI_ALIGNED(8) {
    ChiWid wid;
} ChiEventProcStall;

typedef struct CHI_ALIGNED(8) {
    uint32_t migratedTid;
    ChiWid   newOwnerWid;
} ChiEventThreadMigrate;

typedef struct CHI_ALIGNED(8) {
    ChiGCPhase phase;
} ChiEventGCPhase;

typedef ChiHeapUsage   ChiEventHeapUsage;
typedef ChiSystemStats ChiEventSystemStats;
typedef ChiLocInfo     ChiEventFnLog;
typedef ChiLocInfo     ChiEventModuleInit;
typedef ChiSweepStats  ChiEventSweep;
typedef ChiScanStats   ChiEventMark;

enum {
    _CHI_EVENT_DURATION_WORKER = 9,
    _CHI_EVENT_DURATION_RUNTIME = 3,
    _CHI_EVENT_COUNT = 87,
    _CHI_EVENT_MAXLEN = 19,
};

#define _CHI_EVENT_FILTER_SIZE CHI_DIV_CEIL(_CHI_EVENT_COUNT, 8 * sizeof (uintptr_t))

typedef enum {
    CHI_EVENT_GC_MARK_PHASE_BEGIN,
    CHI_EVENT_GC_MARK_PHASE_END,
    CHI_EVENT_GC_MARK_SLICE_BEGIN,
    CHI_EVENT_GC_MARK_SLICE_END,
    CHI_EVENT_GC_SCAVENGER_BEGIN,
    CHI_EVENT_GC_SCAVENGER_END,
    CHI_EVENT_GC_SWEEP_SLICE_BEGIN,
    CHI_EVENT_GC_SWEEP_SLICE_END,
    CHI_EVENT_PROC_PARK_BEGIN,
    CHI_EVENT_PROC_PARK_END,
    CHI_EVENT_PROC_RUN_BEGIN,
    CHI_EVENT_PROC_RUN_END,
    CHI_EVENT_PROC_SERVICE_BEGIN,
    CHI_EVENT_PROC_SERVICE_END,
    CHI_EVENT_SHUTDOWN_BEGIN,
    CHI_EVENT_SHUTDOWN_END,
    CHI_EVENT_STARTUP_BEGIN,
    CHI_EVENT_STARTUP_END,
    CHI_EVENT_THREAD_RUN_BEGIN,
    CHI_EVENT_THREAD_RUN_END,
    CHI_EVENT_THREAD_SCHED_BEGIN,
    CHI_EVENT_THREAD_SCHED_END,
    CHI_EVENT_USER_DURATION_BEGIN,
    CHI_EVENT_USER_DURATION_END,
    CHI_EVENT_BIGINT_OVERFLOW,
    CHI_EVENT_BLOCK_CHUNK_FREE,
    CHI_EVENT_BLOCK_CHUNK_NEW,
    CHI_EVENT_ENTRY_BLACKHOLE,
    CHI_EVENT_ENTRY_NOTIFY_INT,
    CHI_EVENT_ENTRY_START,
    CHI_EVENT_ENTRY_TIMER_INT,
    CHI_EVENT_ENTRY_UNHANDLED,
    CHI_EVENT_ENTRY_USER_INT,
    CHI_EVENT_EXCEPTION,
    CHI_EVENT_FFI_LOAD,
    CHI_EVENT_FNLOG_CONT,
    CHI_EVENT_FNLOG_ENTER,
    CHI_EVENT_FNLOG_ENTER_JMP,
    CHI_EVENT_FNLOG_FFI,
    CHI_EVENT_FNLOG_LEAVE,
    CHI_EVENT_GC_PHASE_GLOBAL,
    CHI_EVENT_GC_PHASE_LOCAL,
    CHI_EVENT_GC_TRIGGER,
    CHI_EVENT_HEAP_ALLOC_FAILED,
    CHI_EVENT_HEAP_CHUNK_FREE,
    CHI_EVENT_HEAP_CHUNK_NEW,
    CHI_EVENT_HEAP_LIMIT_GC,
    CHI_EVENT_HEAP_LIMIT_OVERFLOW,
    CHI_EVENT_HEAP_USAGE,
    CHI_EVENT_LOG_BEGIN,
    CHI_EVENT_LOG_END,
    CHI_EVENT_MODULE_INIT,
    CHI_EVENT_MODULE_LOAD,
    CHI_EVENT_MODULE_UNLOAD,
    CHI_EVENT_PROC_DESTROY,
    CHI_EVENT_PROC_INIT,
    CHI_EVENT_PROC_MSG_RECV,
    CHI_EVENT_PROC_MSG_SEND,
    CHI_EVENT_PROC_NOTIFY,
    CHI_EVENT_PROC_REQUEST,
    CHI_EVENT_PROC_STALL,
    CHI_EVENT_PROC_SUSPEND,
    CHI_EVENT_PROF_DISABLED,
    CHI_EVENT_PROF_ENABLED,
    CHI_EVENT_PROF_TRACE,
    CHI_EVENT_SIGNAL,
    CHI_EVENT_STACK_ACTIVATE,
    CHI_EVENT_STACK_DEACTIVATE,
    CHI_EVENT_STACK_GROW,
    CHI_EVENT_STACK_SCANNED,
    CHI_EVENT_STACK_SHRINK,
    CHI_EVENT_STACK_TRACE,
    CHI_EVENT_STRBUILDER_OVERFLOW,
    CHI_EVENT_SYSTEM_STATS,
    CHI_EVENT_THREAD_ENQUEUE,
    CHI_EVENT_THREAD_MIGRATE,
    CHI_EVENT_THREAD_NAME,
    CHI_EVENT_THREAD_NEW,
    CHI_EVENT_THREAD_SWITCH,
    CHI_EVENT_THREAD_TAKEOVER,
    CHI_EVENT_THREAD_TERMINATED,
    CHI_EVENT_THREAD_YIELD,
    CHI_EVENT_USER_BUFFER,
    CHI_EVENT_USER_STRING,
    CHI_EVENT_WORKER_DESTROY,
    CHI_EVENT_WORKER_INIT,
    CHI_EVENT_WORKER_NAME,
} ChiEvent;

typedef union {
    ChiEventMark GC_MARK_SLICE_END;
    ChiEventScavenger GC_SCAVENGER_END;
    ChiEventSweep GC_SWEEP_SLICE_END;
    ChiEventThreadNext THREAD_SCHED_END;
    ChiEventChunk BLOCK_CHUNK_FREE;
    ChiEventChunk BLOCK_CHUNK_NEW;
    ChiEventException EXCEPTION;
    ChiEventFFI FFI_LOAD;
    ChiEventFnLog FNLOG_CONT;
    ChiEventFnLog FNLOG_ENTER;
    ChiEventFnLog FNLOG_ENTER_JMP;
    ChiEventFnLogFFI FNLOG_FFI;
    ChiEventFnLog FNLOG_LEAVE;
    ChiEventGCPhase GC_PHASE_GLOBAL;
    ChiEventGCPhase GC_PHASE_LOCAL;
    ChiEventHeapAlloc HEAP_ALLOC_FAILED;
    ChiEventChunk HEAP_CHUNK_FREE;
    ChiEventChunk HEAP_CHUNK_NEW;
    ChiEventHeapUsage HEAP_USAGE;
    ChiEventModuleInit MODULE_INIT;
    ChiEventModuleLoad MODULE_LOAD;
    ChiEventModuleName MODULE_UNLOAD;
    ChiEventProcMsgRecv PROC_MSG_RECV;
    ChiEventProcMsgSend PROC_MSG_SEND;
    ChiEventProcNotify PROC_NOTIFY;
    ChiEventProcRequest PROC_REQUEST;
    ChiEventProcStall PROC_STALL;
    ChiEventProcSuspend PROC_SUSPEND;
    ChiEventStackTrace PROF_TRACE;
    ChiEventSignal SIGNAL;
    ChiEventStack STACK_ACTIVATE;
    ChiEventStack STACK_DEACTIVATE;
    ChiEventStackSize STACK_GROW;
    ChiEventStack STACK_SCANNED;
    ChiEventStackSize STACK_SHRINK;
    ChiEventStackTrace STACK_TRACE;
    ChiEventSystemStats SYSTEM_STATS;
    ChiEventThreadEnqueue THREAD_ENQUEUE;
    ChiEventThreadMigrate THREAD_MIGRATE;
    ChiEventThreadName THREAD_NAME;
    ChiEventThreadNew THREAD_NEW;
    ChiEventThreadNext THREAD_SWITCH;
    ChiEventThreadMigrate THREAD_TAKEOVER;
    ChiEventThreadYield THREAD_YIELD;
    ChiEventUserBuffer USER_BUFFER;
    ChiEventUserString USER_STRING;
    ChiEventWorkerName WORKER_NAME;
} ChiEventPayload;

#if CHI_EVENT_ENABLED
CHI_INTERN void chiEventWrite(void*, ChiEvent, const ChiEventPayload*);
#else
CHI_INL void chiEventWrite(void* CHI_UNUSED(x), ChiEvent CHI_UNUSED(e), const ChiEventPayload* CHI_UNUSED(d)) {}
#endif

CHI_INL void _CHI_EVENT_GC_MARK_PHASE_BEGIN(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_GC_MARK_PHASE_BEGIN, 0); }
CHI_INL void _CHI_EVENT_GC_MARK_PHASE_END(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_GC_MARK_PHASE_END, 0); }
CHI_INL void _CHI_EVENT_GC_MARK_SLICE_BEGIN(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_GC_MARK_SLICE_BEGIN, 0); }
CHI_INL void _CHI_EVENT_GC_MARK_SLICE_END(ChiWorker* x, const ChiEventMark* d) { chiEventWrite(x, CHI_EVENT_GC_MARK_SLICE_END, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_GC_SCAVENGER_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_GC_SCAVENGER_BEGIN, 0); }
CHI_INL void _CHI_EVENT_GC_SCAVENGER_END(ChiProcessor* x, const ChiEventScavenger* d) { chiEventWrite(x, CHI_EVENT_GC_SCAVENGER_END, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_GC_SWEEP_SLICE_BEGIN(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_GC_SWEEP_SLICE_BEGIN, 0); }
CHI_INL void _CHI_EVENT_GC_SWEEP_SLICE_END(ChiWorker* x, const ChiEventSweep* d) { chiEventWrite(x, CHI_EVENT_GC_SWEEP_SLICE_END, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_PARK_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_PARK_BEGIN, 0); }
CHI_INL void _CHI_EVENT_PROC_PARK_END(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_PARK_END, 0); }
CHI_INL void _CHI_EVENT_PROC_RUN_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_RUN_BEGIN, 0); }
CHI_INL void _CHI_EVENT_PROC_RUN_END(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_RUN_END, 0); }
CHI_INL void _CHI_EVENT_PROC_SERVICE_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_SERVICE_BEGIN, 0); }
CHI_INL void _CHI_EVENT_PROC_SERVICE_END(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_SERVICE_END, 0); }
CHI_INL void _CHI_EVENT_SHUTDOWN_BEGIN(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_SHUTDOWN_BEGIN, 0); }
CHI_INL void _CHI_EVENT_SHUTDOWN_END(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_SHUTDOWN_END, 0); }
CHI_INL void _CHI_EVENT_STARTUP_BEGIN(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_STARTUP_BEGIN, 0); }
CHI_INL void _CHI_EVENT_STARTUP_END(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_STARTUP_END, 0); }
CHI_INL void _CHI_EVENT_THREAD_RUN_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_THREAD_RUN_BEGIN, 0); }
CHI_INL void _CHI_EVENT_THREAD_RUN_END(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_THREAD_RUN_END, 0); }
CHI_INL void _CHI_EVENT_THREAD_SCHED_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_THREAD_SCHED_BEGIN, 0); }
CHI_INL void _CHI_EVENT_THREAD_SCHED_END(ChiProcessor* x, const ChiEventThreadNext* d) { chiEventWrite(x, CHI_EVENT_THREAD_SCHED_END, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_USER_DURATION_BEGIN(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_USER_DURATION_BEGIN, 0); }
CHI_INL void _CHI_EVENT_USER_DURATION_END(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_USER_DURATION_END, 0); }
CHI_INL void _CHI_EVENT_BIGINT_OVERFLOW(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_BIGINT_OVERFLOW, 0); }
CHI_INL void _CHI_EVENT_BLOCK_CHUNK_FREE(ChiRuntime* x, const ChiEventChunk* d) { chiEventWrite(x, CHI_EVENT_BLOCK_CHUNK_FREE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_BLOCK_CHUNK_NEW(ChiRuntime* x, const ChiEventChunk* d) { chiEventWrite(x, CHI_EVENT_BLOCK_CHUNK_NEW, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_ENTRY_BLACKHOLE(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_BLACKHOLE, 0); }
CHI_INL void _CHI_EVENT_ENTRY_NOTIFY_INT(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_NOTIFY_INT, 0); }
CHI_INL void _CHI_EVENT_ENTRY_START(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_START, 0); }
CHI_INL void _CHI_EVENT_ENTRY_TIMER_INT(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_TIMER_INT, 0); }
CHI_INL void _CHI_EVENT_ENTRY_UNHANDLED(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_UNHANDLED, 0); }
CHI_INL void _CHI_EVENT_ENTRY_USER_INT(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_ENTRY_USER_INT, 0); }
CHI_INL void _CHI_EVENT_EXCEPTION(ChiProcessor* x, const ChiEventException* d) { chiEventWrite(x, CHI_EVENT_EXCEPTION, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FFI_LOAD(ChiProcessor* x, const ChiEventFFI* d) { chiEventWrite(x, CHI_EVENT_FFI_LOAD, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FNLOG_CONT(ChiProcessor* x, const ChiEventFnLog* d) { chiEventWrite(x, CHI_EVENT_FNLOG_CONT, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FNLOG_ENTER(ChiProcessor* x, const ChiEventFnLog* d) { chiEventWrite(x, CHI_EVENT_FNLOG_ENTER, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FNLOG_ENTER_JMP(ChiProcessor* x, const ChiEventFnLog* d) { chiEventWrite(x, CHI_EVENT_FNLOG_ENTER_JMP, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FNLOG_FFI(ChiProcessor* x, const ChiEventFnLogFFI* d) { chiEventWrite(x, CHI_EVENT_FNLOG_FFI, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_FNLOG_LEAVE(ChiProcessor* x, const ChiEventFnLog* d) { chiEventWrite(x, CHI_EVENT_FNLOG_LEAVE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_GC_PHASE_GLOBAL(ChiProcessor* x, const ChiEventGCPhase* d) { chiEventWrite(x, CHI_EVENT_GC_PHASE_GLOBAL, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_GC_PHASE_LOCAL(ChiProcessor* x, const ChiEventGCPhase* d) { chiEventWrite(x, CHI_EVENT_GC_PHASE_LOCAL, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_GC_TRIGGER(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_GC_TRIGGER, 0); }
CHI_INL void _CHI_EVENT_HEAP_ALLOC_FAILED(ChiProcessor* x, const ChiEventHeapAlloc* d) { chiEventWrite(x, CHI_EVENT_HEAP_ALLOC_FAILED, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_HEAP_CHUNK_FREE(ChiRuntime* x, const ChiEventChunk* d) { chiEventWrite(x, CHI_EVENT_HEAP_CHUNK_FREE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_HEAP_CHUNK_NEW(ChiRuntime* x, const ChiEventChunk* d) { chiEventWrite(x, CHI_EVENT_HEAP_CHUNK_NEW, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_HEAP_LIMIT_GC(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_HEAP_LIMIT_GC, 0); }
CHI_INL void _CHI_EVENT_HEAP_LIMIT_OVERFLOW(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_HEAP_LIMIT_OVERFLOW, 0); }
CHI_INL void _CHI_EVENT_HEAP_USAGE(ChiProcessor* x, const ChiEventHeapUsage* d) { chiEventWrite(x, CHI_EVENT_HEAP_USAGE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_LOG_BEGIN(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_LOG_BEGIN, 0); }
CHI_INL void _CHI_EVENT_LOG_END(ChiRuntime* x) { chiEventWrite(x, CHI_EVENT_LOG_END, 0); }
CHI_INL void _CHI_EVENT_MODULE_INIT(ChiProcessor* x, const ChiEventModuleInit* d) { chiEventWrite(x, CHI_EVENT_MODULE_INIT, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_MODULE_LOAD(ChiProcessor* x, const ChiEventModuleLoad* d) { chiEventWrite(x, CHI_EVENT_MODULE_LOAD, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_MODULE_UNLOAD(ChiProcessor* x, const ChiEventModuleName* d) { chiEventWrite(x, CHI_EVENT_MODULE_UNLOAD, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_DESTROY(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_DESTROY, 0); }
CHI_INL void _CHI_EVENT_PROC_INIT(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_PROC_INIT, 0); }
CHI_INL void _CHI_EVENT_PROC_MSG_RECV(ChiProcessor* x, const ChiEventProcMsgRecv* d) { chiEventWrite(x, CHI_EVENT_PROC_MSG_RECV, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_MSG_SEND(ChiProcessor* x, const ChiEventProcMsgSend* d) { chiEventWrite(x, CHI_EVENT_PROC_MSG_SEND, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_NOTIFY(ChiProcessor* x, const ChiEventProcNotify* d) { chiEventWrite(x, CHI_EVENT_PROC_NOTIFY, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_REQUEST(ChiRuntime* x, const ChiEventProcRequest* d) { chiEventWrite(x, CHI_EVENT_PROC_REQUEST, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_STALL(ChiRuntime* x, const ChiEventProcStall* d) { chiEventWrite(x, CHI_EVENT_PROC_STALL, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROC_SUSPEND(ChiProcessor* x, const ChiEventProcSuspend* d) { chiEventWrite(x, CHI_EVENT_PROC_SUSPEND, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_PROF_DISABLED(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_PROF_DISABLED, 0); }
CHI_INL void _CHI_EVENT_PROF_ENABLED(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_PROF_ENABLED, 0); }
CHI_INL void _CHI_EVENT_PROF_TRACE(ChiWorker* x, const ChiEventStackTrace* d) { chiEventWrite(x, CHI_EVENT_PROF_TRACE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_SIGNAL(ChiRuntime* x, const ChiEventSignal* d) { chiEventWrite(x, CHI_EVENT_SIGNAL, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_ACTIVATE(ChiProcessor* x, const ChiEventStack* d) { chiEventWrite(x, CHI_EVENT_STACK_ACTIVATE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_DEACTIVATE(ChiProcessor* x, const ChiEventStack* d) { chiEventWrite(x, CHI_EVENT_STACK_DEACTIVATE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_GROW(ChiProcessor* x, const ChiEventStackSize* d) { chiEventWrite(x, CHI_EVENT_STACK_GROW, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_SCANNED(ChiProcessor* x, const ChiEventStack* d) { chiEventWrite(x, CHI_EVENT_STACK_SCANNED, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_SHRINK(ChiProcessor* x, const ChiEventStackSize* d) { chiEventWrite(x, CHI_EVENT_STACK_SHRINK, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STACK_TRACE(ChiProcessor* x, const ChiEventStackTrace* d) { chiEventWrite(x, CHI_EVENT_STACK_TRACE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_STRBUILDER_OVERFLOW(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_STRBUILDER_OVERFLOW, 0); }
CHI_INL void _CHI_EVENT_SYSTEM_STATS(ChiRuntime* x, const ChiEventSystemStats* d) { chiEventWrite(x, CHI_EVENT_SYSTEM_STATS, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_ENQUEUE(ChiProcessor* x, const ChiEventThreadEnqueue* d) { chiEventWrite(x, CHI_EVENT_THREAD_ENQUEUE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_MIGRATE(ChiProcessor* x, const ChiEventThreadMigrate* d) { chiEventWrite(x, CHI_EVENT_THREAD_MIGRATE, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_NAME(ChiProcessor* x, const ChiEventThreadName* d) { chiEventWrite(x, CHI_EVENT_THREAD_NAME, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_NEW(ChiProcessor* x, const ChiEventThreadNew* d) { chiEventWrite(x, CHI_EVENT_THREAD_NEW, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_SWITCH(ChiProcessor* x, const ChiEventThreadNext* d) { chiEventWrite(x, CHI_EVENT_THREAD_SWITCH, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_TAKEOVER(ChiProcessor* x, const ChiEventThreadMigrate* d) { chiEventWrite(x, CHI_EVENT_THREAD_TAKEOVER, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_THREAD_TERMINATED(ChiProcessor* x) { chiEventWrite(x, CHI_EVENT_THREAD_TERMINATED, 0); }
CHI_INL void _CHI_EVENT_THREAD_YIELD(ChiProcessor* x, const ChiEventThreadYield* d) { chiEventWrite(x, CHI_EVENT_THREAD_YIELD, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_USER_BUFFER(ChiProcessor* x, const ChiEventUserBuffer* d) { chiEventWrite(x, CHI_EVENT_USER_BUFFER, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_USER_STRING(ChiProcessor* x, const ChiEventUserString* d) { chiEventWrite(x, CHI_EVENT_USER_STRING, (const ChiEventPayload*)d); }
CHI_INL void _CHI_EVENT_WORKER_DESTROY(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_WORKER_DESTROY, 0); }
CHI_INL void _CHI_EVENT_WORKER_INIT(ChiWorker* x) { chiEventWrite(x, CHI_EVENT_WORKER_INIT, 0); }
CHI_INL void _CHI_EVENT_WORKER_NAME(ChiWorker* x, const ChiEventWorkerName* d) { chiEventWrite(x, CHI_EVENT_WORKER_NAME, (const ChiEventPayload*)d); }
