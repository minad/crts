// Generated by generate.pl from defs.in

static bool CHI_CAT(XFORMAT, PayloadActivity)(Log* log, const ChiEventActivity* d, XSTATE xstate) {
    XFIELD("cpuTimeUser", XNUM(CHI_UN(Nanos, d->cpuTimeUser)));
    XFIELD("cpuTimeSystem", XNUM(CHI_UN(Nanos, d->cpuTimeSystem)));
    XFIELD("residentSize", XNUM(d->residentSize));
    XFIELD("pageFault", XNUM(d->pageFault));
    XFIELD("pageSwap", XNUM(d->pageSwap));
    XFIELD("contextSwitch", XNUM(d->contextSwitch));
    XFIELD("diskRead", XNUM(d->diskRead));
    XFIELD("diskWrite", XNUM(d->diskWrite));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadBlackhole)(Log* log, const ChiEventBlackhole* d, XSTATE xstate) {
    XFIELD("count", XNUM(d->count));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadChunk)(Log* log, const ChiEventChunk* d, XSTATE xstate) {
    XFIELD("heapSize", XNUM(d->heapSize));
    XFIELD("size", XNUM(d->size));
    XFIELD("align", XNUM(d->align));
    XFIELD("start", XNUM(d->start));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadException)(Log* log, const ChiEventException* d, XSTATE xstate) {
    XFIELD("name", XSTR(d->name));
    XFIELD("trace", XSTR(d->trace));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadFFI)(Log* log, const ChiEventFFI* d, XSTATE xstate) {
    XFIELD("module", XSTR(d->module));
    XFIELD("name", XSTR(d->name));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadGCRequest)(Log* log, const ChiEventGCRequest* d, XSTATE xstate) {
    XFIELD("trigger", XENUM(ChiGCTrigger, d->trigger));
    XFIELD("requestor", XENUM(ChiGCRequestor, d->requestor));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadGCSlice)(Log* log, const ChiEventGCSlice* d, XSTATE xstate) {
    XFIELD("trigger", XENUM(ChiGCTrigger, d->trigger));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadHeapAlloc)(Log* log, const ChiEventHeapAlloc* d, XSTATE xstate) {
    XFIELD("type", XSTR(d->type));
    XFIELD("size", XNUM(d->size));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadHeapDump)(Log* log, const ChiEventHeapDump* d, XSTATE xstate) {
    XFIELD("file", XSTR(d->file));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadHeapLimit)(Log* log, const ChiEventHeapLimit* d, XSTATE xstate) {
    XFIELD("limit", XENUM(ChiHeapLimit, d->limit));
    XFIELD("heapSize", XNUM(d->heapSize));
    XFIELD("softLimit", XNUM(d->softLimit));
    XFIELD("hardLimit", XNUM(d->hardLimit));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadHeapProf)(Log* log, const ChiEventHeapProf* d, XSTATE xstate) {
    XBLOCK_BEGIN("array");
        XFIELD("count", XNUM(d->array.count));
        XFIELD("words", XNUM(d->array.words));
    XBLOCK_END("array");
    XBLOCK_BEGIN("bigint");
        XFIELD("count", XNUM(d->bigint.count));
        XFIELD("words", XNUM(d->bigint.words));
    XBLOCK_END("bigint");
    XBLOCK_BEGIN("box64");
        XFIELD("count", XNUM(d->box64.count));
        XFIELD("words", XNUM(d->box64.words));
    XBLOCK_END("box64");
    XBLOCK_BEGIN("buffer");
        XFIELD("count", XNUM(d->buffer.count));
        XFIELD("words", XNUM(d->buffer.words));
    XBLOCK_END("buffer");
    XBLOCK_BEGIN("data");
        XFIELD("count", XNUM(d->data.count));
        XFIELD("words", XNUM(d->data.words));
    XBLOCK_END("data");
    XBLOCK_BEGIN("ffi");
        XFIELD("count", XNUM(d->ffi.count));
        XFIELD("words", XNUM(d->ffi.words));
    XBLOCK_END("ffi");
    XBLOCK_BEGIN("fn");
        XFIELD("count", XNUM(d->fn.count));
        XFIELD("words", XNUM(d->fn.words));
    XBLOCK_END("fn");
    XBLOCK_BEGIN("raw");
        XFIELD("count", XNUM(d->raw.count));
        XFIELD("words", XNUM(d->raw.words));
    XBLOCK_END("raw");
    XBLOCK_BEGIN("stack");
        XFIELD("count", XNUM(d->stack.count));
        XFIELD("words", XNUM(d->stack.words));
    XBLOCK_END("stack");
    XBLOCK_BEGIN("string");
        XFIELD("count", XNUM(d->string.count));
        XFIELD("words", XNUM(d->string.words));
    XBLOCK_END("string");
    XBLOCK_BEGIN("stringbuilder");
        XFIELD("count", XNUM(d->stringbuilder.count));
        XFIELD("words", XNUM(d->stringbuilder.words));
    XBLOCK_END("stringbuilder");
    XBLOCK_BEGIN("thread");
        XFIELD("count", XNUM(d->thread.count));
        XFIELD("words", XNUM(d->thread.words));
    XBLOCK_END("thread");
    XBLOCK_BEGIN("thunk");
        XFIELD("count", XNUM(d->thunk.count));
        XFIELD("words", XNUM(d->thunk.words));
    XBLOCK_END("thunk");
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadHeapUsage)(Log* log, const ChiEventHeapUsage* d, XSTATE xstate) {
    XBLOCK_BEGIN("major");
        XBLOCK_BEGIN("small");
            XFIELD("allocSinceSweep", XNUM(d->major.small.allocSinceSweep));
            XFIELD("allocSinceStart", XNUM(d->major.small.allocSinceStart));
            XFIELD("totalWords", XNUM(d->major.small.totalWords));
        XBLOCK_END("small");
        XBLOCK_BEGIN("medium");
            XFIELD("allocSinceSweep", XNUM(d->major.medium.allocSinceSweep));
            XFIELD("allocSinceStart", XNUM(d->major.medium.allocSinceStart));
            XFIELD("totalWords", XNUM(d->major.medium.totalWords));
        XBLOCK_END("medium");
        XBLOCK_BEGIN("large");
            XFIELD("allocSinceSweep", XNUM(d->major.large.allocSinceSweep));
            XFIELD("allocSinceStart", XNUM(d->major.large.allocSinceStart));
            XFIELD("totalWords", XNUM(d->major.large.totalWords));
        XBLOCK_END("large");
    XBLOCK_END("major");
    XBLOCK_BEGIN("minor");
        XFIELD("usedWords", XNUM(d->minor.usedWords));
        XFIELD("totalWords", XNUM(d->minor.totalWords));
    XBLOCK_END("minor");
    XFIELD("totalWords", XNUM(d->totalWords));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadMark)(Log* log, const ChiEventMark* d, XSTATE xstate) {
    XBLOCK_BEGIN("object");
        XFIELD("count", XNUM(d->object.count));
        XFIELD("words", XNUM(d->object.words));
    XBLOCK_END("object");
    XBLOCK_BEGIN("stack");
        XFIELD("count", XNUM(d->stack.count));
        XFIELD("words", XNUM(d->stack.words));
    XBLOCK_END("stack");
    XFIELD("collapsed", XNUM(d->collapsed));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadModuleLoad)(Log* log, const ChiEventModuleLoad* d, XSTATE xstate) {
    XFIELD("module", XSTR(d->module));
    XFIELD("file", XSTR(d->file));
    XFIELD("path", XSTR(d->path));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadModuleName)(Log* log, const ChiEventModuleName* d, XSTATE xstate) {
    XFIELD("module", XSTR(d->module));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadNursery)(Log* log, const ChiEventNursery* d, XSTATE xstate) {
    XFIELD("oldLimit", XNUM(d->oldLimit));
    XFIELD("newLimit", XNUM(d->newLimit));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadResumeReq)(Log* log, const ChiEventResumeReq* d, XSTATE xstate) {
    XFIELD("count", XNUM(d->count));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadScavenger)(Log* log, const ChiEventScavenger* d, XSTATE xstate) {
    XBLOCK_BEGIN("dirty");
        XBLOCK_BEGIN("object");
            XFIELD("count", XNUM(d->dirty.object.count));
            XFIELD("words", XNUM(d->dirty.object.words));
        XBLOCK_END("object");
        XBLOCK_BEGIN("stack");
            XFIELD("count", XNUM(d->dirty.stack.count));
            XFIELD("words", XNUM(d->dirty.stack.words));
        XBLOCK_END("stack");
    XBLOCK_END("dirty");
    XBLOCK_BEGIN("raw");
        XBLOCK_BEGIN("promoted");
            XFIELD("count", XNUM(d->raw.promoted.count));
            XFIELD("words", XNUM(d->raw.promoted.words));
        XBLOCK_END("promoted");
        XBLOCK_BEGIN("copied");
            XFIELD("count", XNUM(d->raw.copied.count));
            XFIELD("words", XNUM(d->raw.copied.words));
        XBLOCK_END("copied");
    XBLOCK_END("raw");
    XBLOCK_BEGIN("object");
        XBLOCK_BEGIN("promoted");
            XFIELD("count", XNUM(d->object.promoted.count));
            XFIELD("words", XNUM(d->object.promoted.words));
        XBLOCK_END("promoted");
        XBLOCK_BEGIN("copied");
            XFIELD("count", XNUM(d->object.copied.count));
            XFIELD("words", XNUM(d->object.copied.words));
        XBLOCK_END("copied");
        XBLOCK_BEGIN("copied1");
            XFIELD("count", XNUM(d->object.copied1.count));
            XFIELD("words", XNUM(d->object.copied1.words));
        XBLOCK_END("copied1");
    XBLOCK_END("object");
    XFIELD("collapsed", XNUM(d->collapsed));
    XFIELD("gen", XNUM(d->gen));
    XFIELD("snapshot", XNUM(d->snapshot));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadSignal)(Log* log, const ChiEventSignal* d, XSTATE xstate) {
    XFIELD("sig", XENUM(ChiSig, d->sig));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadStackSize)(Log* log, const ChiEventStackSize* d, XSTATE xstate) {
    XFIELD("reqSize", XNUM(d->reqSize));
    XFIELD("oldSize", XNUM(d->oldSize));
    XFIELD("newSize", XNUM(d->newSize));
    XFIELD("usedSize", XNUM(d->usedSize));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadStackTrace)(Log* log, const ChiEventStackTrace* d, XSTATE xstate) {
    XFIELD("trace", XSTR(d->trace));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadSweep)(Log* log, const ChiEventSweep* d, XSTATE xstate) {
    XBLOCK_BEGIN("small");
        XBLOCK_BEGIN("live");
            XFIELD("count", XNUM(d->small.live.count));
            XFIELD("words", XNUM(d->small.live.words));
        XBLOCK_END("live");
        XBLOCK_BEGIN("free");
            XFIELD("count", XNUM(d->small.free.count));
            XFIELD("words", XNUM(d->small.free.words));
        XBLOCK_END("free");
    XBLOCK_END("small");
    XBLOCK_BEGIN("medium");
        XBLOCK_BEGIN("live");
            XFIELD("count", XNUM(d->medium.live.count));
            XFIELD("words", XNUM(d->medium.live.words));
        XBLOCK_END("live");
        XBLOCK_BEGIN("free");
            XFIELD("count", XNUM(d->medium.free.count));
            XFIELD("words", XNUM(d->medium.free.words));
        XBLOCK_END("free");
    XBLOCK_END("medium");
    XBLOCK_BEGIN("large");
        XBLOCK_BEGIN("live");
            XFIELD("count", XNUM(d->large.live.count));
            XFIELD("words", XNUM(d->large.live.words));
        XBLOCK_END("live");
        XBLOCK_BEGIN("free");
            XFIELD("count", XNUM(d->large.free.count));
            XFIELD("words", XNUM(d->large.free.words));
        XBLOCK_END("free");
    XBLOCK_END("large");
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadThreadName)(Log* log, const ChiEventThreadName* d, XSTATE xstate) {
    XFIELD("tid", XNUM(d->tid));
    XFIELD("name", XSTR(d->name));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadThreadNew)(Log* log, const ChiEventThreadNew* d, XSTATE xstate) {
    XFIELD("tid", XNUM(d->tid));
    XFIELD("count", XNUM(d->count));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadThreadTerm)(Log* log, const ChiEventThreadTerm* d, XSTATE xstate) {
    XFIELD("count", XNUM(d->count));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadTrace)(Log* log, const ChiEventTrace* d, XSTATE xstate) {
    XFIELD("module", XSTR(d->module));
    XFIELD("fn", XSTR(d->fn));
    XFIELD("file", XSTR(d->file));
    XFIELD("size", XNUM(d->size));
    XFIELD("line", XNUM(d->line));
    XFIELD("interp", XNUM(d->interp));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadTraceFFI)(Log* log, const ChiEventTraceFFI* d, XSTATE xstate) {
    XFIELD("name", XSTR(d->name));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadUser)(Log* log, const ChiEventUser* d, XSTATE xstate) {
    XFIELD("data", XSTR(d->data));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadVersion)(Log* log, const ChiEventVersion* d, XSTATE xstate) {
    XFIELD("version", XNUM(d->version));
    return true;
}

static bool CHI_CAT(XFORMAT, PayloadWorkerName)(Log* log, const ChiEventWorkerName* d, XSTATE xstate) {
    XFIELD("name", XSTR(d->name));
    return true;
}

static bool CHI_CAT(XFORMAT, Payload)(Log* log, const Event* e, XSTATE xstate) {
    switch (e->type) {
    case CHI_EVENT_BEGIN: CHI_CAT(XFORMAT, PayloadVersion)(log, e->data.BEGIN, xstate);break;
    case CHI_EVENT_END: break;
    case CHI_EVENT_PROC_INIT: break;
    case CHI_EVENT_PROC_DESTROY: break;
    case CHI_EVENT_PROC_RESUME_REQ: CHI_CAT(XFORMAT, PayloadResumeReq)(log, e->data.PROC_RESUME_REQ, xstate);break;
    case CHI_EVENT_PROC_TICK: break;
    case CHI_EVENT_WORKER_INIT: break;
    case CHI_EVENT_WORKER_DESTROY: break;
    case CHI_EVENT_WORKER_NAME: CHI_CAT(XFORMAT, PayloadWorkerName)(log, e->data.WORKER_NAME, xstate);break;
    case CHI_EVENT_MODULE_LOAD: CHI_CAT(XFORMAT, PayloadModuleLoad)(log, e->data.MODULE_LOAD, xstate);break;
    case CHI_EVENT_MODULE_UNLOAD: CHI_CAT(XFORMAT, PayloadModuleName)(log, e->data.MODULE_UNLOAD, xstate);break;
    case CHI_EVENT_MODULE_INIT: CHI_CAT(XFORMAT, PayloadModuleName)(log, e->data.MODULE_INIT, xstate);break;
    case CHI_EVENT_FFI_LOAD: CHI_CAT(XFORMAT, PayloadFFI)(log, e->data.FFI_LOAD, xstate);break;
    case CHI_EVENT_TRACE_FFI: CHI_CAT(XFORMAT, PayloadTraceFFI)(log, e->data.TRACE_FFI, xstate);break;
    case CHI_EVENT_TRACE_ENTER: CHI_CAT(XFORMAT, PayloadTrace)(log, e->data.TRACE_ENTER, xstate);break;
    case CHI_EVENT_TRACE_LEAVE: CHI_CAT(XFORMAT, PayloadTrace)(log, e->data.TRACE_LEAVE, xstate);break;
    case CHI_EVENT_TRACE_ENTER_JMP: CHI_CAT(XFORMAT, PayloadTrace)(log, e->data.TRACE_ENTER_JMP, xstate);break;
    case CHI_EVENT_EXCEPTION_HANDLED: CHI_CAT(XFORMAT, PayloadException)(log, e->data.EXCEPTION_HANDLED, xstate);break;
    case CHI_EVENT_EXCEPTION_UNHANDLED: CHI_CAT(XFORMAT, PayloadException)(log, e->data.EXCEPTION_UNHANDLED, xstate);break;
    case CHI_EVENT_GC_BLOCK: break;
    case CHI_EVENT_GC_UNBLOCK: break;
    case CHI_EVENT_GC_REQ: CHI_CAT(XFORMAT, PayloadGCRequest)(log, e->data.GC_REQ, xstate);break;
    case CHI_EVENT_GC_MARK_STATS: CHI_CAT(XFORMAT, PayloadMark)(log, e->data.GC_MARK_STATS, xstate);break;
    case CHI_EVENT_GC_SWEEP_STATS: CHI_CAT(XFORMAT, PayloadSweep)(log, e->data.GC_SWEEP_STATS, xstate);break;
    case CHI_EVENT_GC_SWEEP_NOTIFY: break;
    case CHI_EVENT_NURSERY_RESIZE: CHI_CAT(XFORMAT, PayloadNursery)(log, e->data.NURSERY_RESIZE, xstate);break;
    case CHI_EVENT_HEAP_BEFORE_SCAV: CHI_CAT(XFORMAT, PayloadHeapUsage)(log, e->data.HEAP_BEFORE_SCAV, xstate);break;
    case CHI_EVENT_HEAP_AFTER_SCAV: CHI_CAT(XFORMAT, PayloadHeapUsage)(log, e->data.HEAP_AFTER_SCAV, xstate);break;
    case CHI_EVENT_BLOCK_CHUNK_NEW: CHI_CAT(XFORMAT, PayloadChunk)(log, e->data.BLOCK_CHUNK_NEW, xstate);break;
    case CHI_EVENT_BLOCK_CHUNK_FREE: CHI_CAT(XFORMAT, PayloadChunk)(log, e->data.BLOCK_CHUNK_FREE, xstate);break;
    case CHI_EVENT_HEAP_CHUNK_NEW: CHI_CAT(XFORMAT, PayloadChunk)(log, e->data.HEAP_CHUNK_NEW, xstate);break;
    case CHI_EVENT_HEAP_CHUNK_FREE: CHI_CAT(XFORMAT, PayloadChunk)(log, e->data.HEAP_CHUNK_FREE, xstate);break;
    case CHI_EVENT_HEAP_LIMIT: CHI_CAT(XFORMAT, PayloadHeapLimit)(log, e->data.HEAP_LIMIT, xstate);break;
    case CHI_EVENT_HEAP_ALLOC_FAILED: CHI_CAT(XFORMAT, PayloadHeapAlloc)(log, e->data.HEAP_ALLOC_FAILED, xstate);break;
    case CHI_EVENT_PAR: break;
    case CHI_EVENT_STACK_GROW: CHI_CAT(XFORMAT, PayloadStackSize)(log, e->data.STACK_GROW, xstate);break;
    case CHI_EVENT_STACK_SHRINK: CHI_CAT(XFORMAT, PayloadStackSize)(log, e->data.STACK_SHRINK, xstate);break;
    case CHI_EVENT_STACK_TRACE: CHI_CAT(XFORMAT, PayloadStackTrace)(log, e->data.STACK_TRACE, xstate);break;
    case CHI_EVENT_STACK_BLACKHOLE: CHI_CAT(XFORMAT, PayloadBlackhole)(log, e->data.STACK_BLACKHOLE, xstate);break;
    case CHI_EVENT_PROF_TRACE: CHI_CAT(XFORMAT, PayloadStackTrace)(log, e->data.PROF_TRACE, xstate);break;
    case CHI_EVENT_PROF_ENABLED: break;
    case CHI_EVENT_PROF_DISABLED: break;
    case CHI_EVENT_THREAD_NAME: CHI_CAT(XFORMAT, PayloadThreadName)(log, e->data.THREAD_NAME, xstate);break;
    case CHI_EVENT_THREAD_NEW: CHI_CAT(XFORMAT, PayloadThreadNew)(log, e->data.THREAD_NEW, xstate);break;
    case CHI_EVENT_THREAD_TERMINATED: CHI_CAT(XFORMAT, PayloadThreadTerm)(log, e->data.THREAD_TERMINATED, xstate);break;
    case CHI_EVENT_THREAD_BLACKHOLE: break;
    case CHI_EVENT_BIGINT_OVERFLOW: break;
    case CHI_EVENT_STRBUILDER_OVERFLOW: break;
    case CHI_EVENT_TICK: break;
    case CHI_EVENT_SIGNAL: CHI_CAT(XFORMAT, PayloadSignal)(log, e->data.SIGNAL, xstate);break;
    case CHI_EVENT_ACTIVITY: CHI_CAT(XFORMAT, PayloadActivity)(log, e->data.ACTIVITY, xstate);break;
    case CHI_EVENT_USER: CHI_CAT(XFORMAT, PayloadUser)(log, e->data.USER, xstate);break;
    case CHI_EVENT_HEAP_CHECK_BEGIN: break;
    case CHI_EVENT_HEAP_CHECK_END: break;
    case CHI_EVENT_HEAP_DUMP_BEGIN: break;
    case CHI_EVENT_HEAP_DUMP_END: CHI_CAT(XFORMAT, PayloadHeapDump)(log, e->data.HEAP_DUMP_END, xstate);break;
    case CHI_EVENT_HEAP_PROF_BEGIN: break;
    case CHI_EVENT_HEAP_PROF_END: CHI_CAT(XFORMAT, PayloadHeapProf)(log, e->data.HEAP_PROF_END, xstate);break;
    case CHI_EVENT_GC_SLICE_BEGIN: break;
    case CHI_EVENT_GC_SLICE_END: CHI_CAT(XFORMAT, PayloadGCSlice)(log, e->data.GC_SLICE_END, xstate);break;
    case CHI_EVENT_GC_MARKSWEEP_BEGIN: break;
    case CHI_EVENT_GC_MARKSWEEP_END: break;
    case CHI_EVENT_GC_MARK_PHASE_BEGIN: break;
    case CHI_EVENT_GC_MARK_PHASE_END: break;
    case CHI_EVENT_GC_MARK_SLICE_BEGIN: break;
    case CHI_EVENT_GC_MARK_SLICE_END: break;
    case CHI_EVENT_GC_SWEEP_PHASE_BEGIN: break;
    case CHI_EVENT_GC_SWEEP_PHASE_END: break;
    case CHI_EVENT_GC_SWEEP_SLICE_BEGIN: break;
    case CHI_EVENT_GC_SWEEP_SLICE_END: break;
    case CHI_EVENT_GC_SCAVENGER_BEGIN: break;
    case CHI_EVENT_GC_SCAVENGER_END: CHI_CAT(XFORMAT, PayloadScavenger)(log, e->data.GC_SCAVENGER_END, xstate);break;
    case CHI_EVENT_PROC_RUN_BEGIN: break;
    case CHI_EVENT_PROC_RUN_END: break;
    case CHI_EVENT_PROC_SUSPEND_BEGIN: break;
    case CHI_EVENT_PROC_SUSPEND_END: break;
    case CHI_EVENT_PROC_WAIT_SYNC_BEGIN: break;
    case CHI_EVENT_PROC_WAIT_SYNC_END: break;
    case CHI_EVENT_PROC_SYNC_BEGIN: break;
    case CHI_EVENT_PROC_SYNC_END: break;
    case CHI_EVENT_THREAD_SCHED_BEGIN: break;
    case CHI_EVENT_THREAD_SCHED_END: break;
    case CHI_EVENT_THREAD_RUN_BEGIN: break;
    case CHI_EVENT_THREAD_RUN_END: break;
    case CHI_EVENT_USER_DURATION_BEGIN: break;
    case CHI_EVENT_USER_DURATION_END: CHI_CAT(XFORMAT, PayloadUser)(log, e->data.USER_DURATION_END, xstate);break;
    case CHI_EVENT_STARTUP_BEGIN: break;
    case CHI_EVENT_STARTUP_END: break;
    case CHI_EVENT_SHUTDOWN_BEGIN: break;
    case CHI_EVENT_SHUTDOWN_END: break;
    default: break;
    }
    return true;
}

static bool CHI_CAT(XFORMAT, Event)(Log* log, const Event* e) {
    XINIT;
    XEVENT_BEGIN(e->type);
    XFIELD("ts", XNUM(CHI_UN(Nanos, e->time)));
    if (eventDesc[e->type].cls == CLASS_END)
        XFIELD("dur", XNUM(CHI_UN(Nanos, e->dur)));
    if (eventDesc[e->type].ctx != CTX_RUNTIME)
        XFIELD("wid", XNUM(e->wid));
    if (eventDesc[e->type].ctx == CTX_THREAD)
        XFIELD("tid", XNUM(chiToUnboxed(chiToThread(e->thread)->tid)));
    if (e->data.ANY)
        CHI_CAT(XFORMAT, Payload)(log, e, xstate);
    XEVENT_END(e->type);
    return true;
}

#include "undef.h"
