// Inline primitive
bitsToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_bitsToFloat32(chiToUInt32(a0)));
}
// Inline primitive
bitsToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_bitsToFloat64(chiToUInt64(a0)));
}
// Inline primitive
charEq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_charEq(chiToChar(a0), chiToChar(a1)));
}
// Inline primitive
charLe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_charLe(chiToChar(a0), chiToChar(a1)));
}
// Inline primitive
charLt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_charLt(chiToChar(a0), chiToChar(a1)));
}
// Inline primitive
charNe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_charNe(chiToChar(a0), chiToChar(a1)));
}
// Inline primitive
charToString w8:res r8:a0 {
    *res = chi_Prim_charToString(chiToChar(a0));
}
// Inline primitive
charToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_charToUInt32(chiToChar(a0)));
}
// Inline primitive
float32Abs w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Abs(chiToFloat32(a0)));
}
// Inline primitive
float32Acos w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Acos(chiToFloat32(a0)));
}
// Inline primitive
float32Add w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Add(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Asin w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Asin(chiToFloat32(a0)));
}
// Inline primitive
float32Atan w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Atan(chiToFloat32(a0)));
}
// Inline primitive
float32Ceil w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Ceil(chiToFloat32(a0)));
}
// Inline primitive
float32Cos w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Cos(chiToFloat32(a0)));
}
// Inline primitive
float32Cosh w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Cosh(chiToFloat32(a0)));
}
// Inline primitive
float32Div w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Div(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float32Eq(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Exp w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Exp(chiToFloat32(a0)));
}
// Inline primitive
float32Expm1 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Expm1(chiToFloat32(a0)));
}
// Inline primitive
float32Floor w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Floor(chiToFloat32(a0)));
}
// Inline primitive
float32Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float32Le(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Log w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Log(chiToFloat32(a0)));
}
// Inline primitive
float32Log1p w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Log1p(chiToFloat32(a0)));
}
// Inline primitive
float32Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float32Lt(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Max w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Max(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Min w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Min(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Mul w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Mul(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float32Ne(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Neg w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Neg(chiToFloat32(a0)));
}
// Inline primitive
float32Pow w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Pow(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Round w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Round(chiToFloat32(a0)));
}
// Inline primitive
float32Sin w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Sin(chiToFloat32(a0)));
}
// Inline primitive
float32Sinh w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Sinh(chiToFloat32(a0)));
}
// Inline primitive
float32Sqrt w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Sqrt(chiToFloat32(a0)));
}
// Inline primitive
float32Sub w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_float32Sub(chiToFloat32(a0), chiToFloat32(a1)));
}
// Inline primitive
float32Tan w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Tan(chiToFloat32(a0)));
}
// Inline primitive
float32Tanh w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Tanh(chiToFloat32(a0)));
}
// Inline primitive
float32ToBits w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_float32ToBits(chiToFloat32(a0)));
}
// Inline primitive
float32ToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float32ToFloat64(chiToFloat32(a0)));
}
// Inline primitive
float32ToInt w8:res r8:a0 {
    *res = chi_Prim_float32ToInt(chiToFloat32(a0));
}
// Inline primitive
float32ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_float32ToInt32(chiToFloat32(a0)));
}
// Inline primitive
float32ToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_float32ToInt64(chiToFloat32(a0)));
}
// Inline primitive
float32ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_float32ToUInt32(chiToFloat32(a0)));
}
// Inline primitive
float32ToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_float32ToUInt64(chiToFloat32(a0)));
}
// Inline primitive
float32Trunc w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float32Trunc(chiToFloat32(a0)));
}
// Inline primitive
float64Abs w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Abs(chiToFloat64(a0)));
}
// Inline primitive
float64Acos w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Acos(chiToFloat64(a0)));
}
// Inline primitive
float64Add w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Add(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Asin w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Asin(chiToFloat64(a0)));
}
// Inline primitive
float64Atan w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Atan(chiToFloat64(a0)));
}
// Inline primitive
float64Ceil w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Ceil(chiToFloat64(a0)));
}
// Inline primitive
float64Cos w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Cos(chiToFloat64(a0)));
}
// Inline primitive
float64Cosh w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Cosh(chiToFloat64(a0)));
}
// Inline primitive
float64Div w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Div(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float64Eq(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Exp w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Exp(chiToFloat64(a0)));
}
// Inline primitive
float64Expm1 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Expm1(chiToFloat64(a0)));
}
// Inline primitive
float64Floor w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Floor(chiToFloat64(a0)));
}
// Inline primitive
float64Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float64Le(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Log w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Log(chiToFloat64(a0)));
}
// Inline primitive
float64Log1p w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Log1p(chiToFloat64(a0)));
}
// Inline primitive
float64Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float64Lt(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Max w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Max(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Min w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Min(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Mul w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Mul(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_float64Ne(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Neg w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Neg(chiToFloat64(a0)));
}
// Inline primitive
float64Pow w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Pow(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Round w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Round(chiToFloat64(a0)));
}
// Inline primitive
float64Sin w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Sin(chiToFloat64(a0)));
}
// Inline primitive
float64Sinh w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Sinh(chiToFloat64(a0)));
}
// Inline primitive
float64Sqrt w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Sqrt(chiToFloat64(a0)));
}
// Inline primitive
float64Sub w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_float64Sub(chiToFloat64(a0), chiToFloat64(a1)));
}
// Inline primitive
float64Tan w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Tan(chiToFloat64(a0)));
}
// Inline primitive
float64Tanh w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Tanh(chiToFloat64(a0)));
}
// Inline primitive
float64ToBits w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_float64ToBits(chiToFloat64(a0)));
}
// Inline primitive
float64ToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_float64ToFloat32(chiToFloat64(a0)));
}
// Inline primitive
float64ToInt w8:res r8:a0 {
    *res = chi_Prim_float64ToInt(chiToFloat64(a0));
}
// Inline primitive
float64ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_float64ToInt32(chiToFloat64(a0)));
}
// Inline primitive
float64ToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_float64ToInt64(chiToFloat64(a0)));
}
// Inline primitive
float64ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_float64ToUInt32(chiToFloat64(a0)));
}
// Inline primitive
float64ToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_float64ToUInt64(chiToFloat64(a0)));
}
// Inline primitive
float64Trunc w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_float64Trunc(chiToFloat64(a0)));
}
// Inline primitive
int16ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_int16ToInt32(chiToInt16(a0)));
}
// Inline primitive
int32Add w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Add(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32And w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32And(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Div w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Div(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int32Eq(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int32Le(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int32Lt(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Mod w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Mod(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Mul w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Mul(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int32Ne(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Neg w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_int32Neg(chiToInt32(a0)));
}
// Inline primitive
int32Not w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_int32Not(chiToInt32(a0)));
}
// Inline primitive
int32Or w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Or(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Quot w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Quot(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Rem w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Rem(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32Shl w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Shl(chiToInt32(a0), chiToUInt8(a1)));
}
// Inline primitive
int32Shr w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Shr(chiToInt32(a0), chiToUInt8(a1)));
}
// Inline primitive
int32Sub w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Sub(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int32ToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_int32ToFloat32(chiToInt32(a0)));
}
// Inline primitive
int32ToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_int32ToFloat64(chiToInt32(a0)));
}
// Inline primitive
int32ToInt w8:res r8:a0 {
    *res = chi_Prim_int32ToInt(chiToInt32(a0));
}
// Inline primitive
int32ToInt16 w8:res r8:a0 {
    *res = chiFromInt16(chi_Prim_int32ToInt16(chiToInt32(a0)));
}
// Inline primitive
int32ToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_int32ToInt64(chiToInt32(a0)));
}
// Inline primitive
int32ToInt8 w8:res r8:a0 {
    *res = chiFromInt8(chi_Prim_int32ToInt8(chiToInt32(a0)));
}
// Inline primitive
int32ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_int32ToUInt32(chiToInt32(a0)));
}
// Inline primitive
int32ToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_int32ToUInt64(chiToInt32(a0)));
}
// Inline primitive
int32Xor w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_int32Xor(chiToInt32(a0), chiToInt32(a1)));
}
// Inline primitive
int64Add w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Add(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64And w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64And(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Div w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Div(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int64Eq(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int64Le(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int64Lt(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Mod w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Mod(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Mul w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Mul(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_int64Ne(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Neg w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_int64Neg(chiToInt64(a0)));
}
// Inline primitive
int64Not w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_int64Not(chiToInt64(a0)));
}
// Inline primitive
int64Or w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Or(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Quot w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Quot(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Rem w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Rem(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64Shl w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Shl(chiToInt64(a0), chiToUInt8(a1)));
}
// Inline primitive
int64Shr w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Shr(chiToInt64(a0), chiToUInt8(a1)));
}
// Inline primitive
int64Sub w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Sub(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int64ToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_int64ToFloat32(chiToInt64(a0)));
}
// Inline primitive
int64ToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_int64ToFloat64(chiToInt64(a0)));
}
// Inline primitive
int64ToInt w8:res r8:a0 {
    *res = chi_Prim_int64ToInt(chiToInt64(a0));
}
// Inline primitive
int64ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_int64ToInt32(chiToInt64(a0)));
}
// Inline primitive
int64ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_int64ToUInt32(chiToInt64(a0)));
}
// Inline primitive
int64ToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_int64ToUInt64(chiToInt64(a0)));
}
// Inline primitive
int64Xor w8:res r8:a0 r8:a1 {
    *res = chiFromInt64(chi_Prim_int64Xor(chiToInt64(a0), chiToInt64(a1)));
}
// Inline primitive
int8ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_int8ToInt32(chiToInt8(a0)));
}
// Inline primitive
intAdd w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intAdd(a0, a1);
}
// Inline primitive
intAnd w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intAnd(a0, a1);
}
// Inline primitive
intCmp w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_intCmp(a0, a1));
}
// Inline primitive
intDiv w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intDiv(a0, a1);
}
// Inline primitive
intEq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_intEq(a0, a1));
}
// Inline primitive
intLe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_intLe(a0, a1));
}
// Inline primitive
intLt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_intLt(a0, a1));
}
// Inline primitive
intMod w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intMod(a0, a1);
}
// Inline primitive
intMul w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intMul(a0, a1);
}
// Inline primitive
intNe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_intNe(a0, a1));
}
// Inline primitive
intNeg w8:res r8:a0 {
    *res = chi_Prim_intNeg(a0);
}
// Inline primitive
intNot w8:res r8:a0 {
    *res = chi_Prim_intNot(a0);
}
// Inline primitive
intOr w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intOr(a0, a1);
}
// Inline primitive
intQuot w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intQuot(a0, a1);
}
// Inline primitive
intRem w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intRem(a0, a1);
}
// Inline primitive
intShl w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intShl(a0, chiToUInt16(a1));
}
// Inline primitive
intShr w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intShr(a0, chiToUInt16(a1));
}
// Inline primitive
intSub w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intSub(a0, a1);
}
// Inline primitive
intToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_intToFloat32(a0));
}
// Inline primitive
intToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_intToFloat64(a0));
}
// Inline primitive
intToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_intToInt32(a0));
}
// Inline primitive
intToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_intToInt64(a0));
}
// Inline primitive
intToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_intToUInt32(a0));
}
// Inline primitive
intToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_intToUInt64(a0));
}
// Inline primitive
intXor w8:res r8:a0 r8:a1 {
    *res = chi_Prim_intXor(a0, a1);
}
// Inline primitive
stringCmp w8:res r8:a0 r8:a1 {
    *res = chiFromInt32(chi_Prim_stringCmp(a0, a1));
}
// Inline primitive
stringCursorBegin w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_stringCursorBegin(a0));
}
// Inline primitive
stringCursorEnd w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_stringCursorEnd(a0));
}
// Inline primitive
stringCursorEq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_stringCursorEq(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
stringCursorGet w8:res r8:a0 r8:a1 {
    *res = chiFromChar(chi_Prim_stringCursorGet(a0, chiToUInt32(a1)));
}
// Inline primitive
stringCursorNext w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_stringCursorNext(a0, chiToUInt32(a1)));
}
// Inline primitive
stringCursorPrev w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_stringCursorPrev(a0, chiToUInt32(a1)));
}
// Inline primitive
stringEq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_stringEq(a0, a1));
}
// Inline primitive
stringLe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_stringLe(a0, a1));
}
// Inline primitive
stringLt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_stringLt(a0, a1));
}
// Inline primitive
stringNe w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_stringNe(a0, a1));
}
// Inline primitive
stringNull w8:res r8:a0 {
    *res = chiFromBool(chi_Prim_stringNull(a0));
}
// Inline primitive
substring w8:res r8:a0 r8:a1 r8:a2 {
    *res = chi_Prim_substring(a0, chiToUInt32(a1), chiToUInt32(a2));
}
// Inline primitive
uint16ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_uint16ToUInt32(chiToUInt16(a0)));
}
// Inline primitive
uint32Add w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Add(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32And w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32And(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Div w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Div(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint32Eq(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint32Le(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint32Lt(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Mod w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Mod(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Mul w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Mul(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint32Ne(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Neg w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_uint32Neg(chiToUInt32(a0)));
}
// Inline primitive
uint32Not w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_uint32Not(chiToUInt32(a0)));
}
// Inline primitive
uint32Or w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Or(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32Shl w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Shl(chiToUInt32(a0), chiToUInt8(a1)));
}
// Inline primitive
uint32Shr w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Shr(chiToUInt32(a0), chiToUInt8(a1)));
}
// Inline primitive
uint32Sub w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Sub(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint32ToChar w8:res r8:a0 {
    *res = chiFromChar(chi_Prim_uint32ToChar(chiToUInt32(a0)));
}
// Inline primitive
uint32ToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_uint32ToFloat32(chiToUInt32(a0)));
}
// Inline primitive
uint32ToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_uint32ToFloat64(chiToUInt32(a0)));
}
// Inline primitive
uint32ToInt w8:res r8:a0 {
    *res = chi_Prim_uint32ToInt(chiToUInt32(a0));
}
// Inline primitive
uint32ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_uint32ToInt32(chiToUInt32(a0)));
}
// Inline primitive
uint32ToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_uint32ToInt64(chiToUInt32(a0)));
}
// Inline primitive
uint32ToUInt16 w8:res r8:a0 {
    *res = chiFromUInt16(chi_Prim_uint32ToUInt16(chiToUInt32(a0)));
}
// Inline primitive
uint32ToUInt64 w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_uint32ToUInt64(chiToUInt32(a0)));
}
// Inline primitive
uint32ToUInt8 w8:res r8:a0 {
    *res = chiFromUInt8(chi_Prim_uint32ToUInt8(chiToUInt32(a0)));
}
// Inline primitive
uint32Xor w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_uint32Xor(chiToUInt32(a0), chiToUInt32(a1)));
}
// Inline primitive
uint64Add w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Add(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64And w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64And(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Div w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Div(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Eq w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint64Eq(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Le w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint64Le(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Lt w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint64Lt(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Mod w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Mod(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Mul w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Mul(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Ne w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_uint64Ne(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Neg w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_uint64Neg(chiToUInt64(a0)));
}
// Inline primitive
uint64Not w8:res r8:a0 {
    *res = chiFromUInt64(chi_Prim_uint64Not(chiToUInt64(a0)));
}
// Inline primitive
uint64Or w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Or(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64Shl w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Shl(chiToUInt64(a0), chiToUInt8(a1)));
}
// Inline primitive
uint64Shr w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Shr(chiToUInt64(a0), chiToUInt8(a1)));
}
// Inline primitive
uint64Sub w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Sub(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint64ToFloat32 w8:res r8:a0 {
    *res = chiFromFloat32(chi_Prim_uint64ToFloat32(chiToUInt64(a0)));
}
// Inline primitive
uint64ToFloat64 w8:res r8:a0 {
    *res = chiFromFloat64(chi_Prim_uint64ToFloat64(chiToUInt64(a0)));
}
// Inline primitive
uint64ToInt w8:res r8:a0 {
    *res = chi_Prim_uint64ToInt(chiToUInt64(a0));
}
// Inline primitive
uint64ToInt32 w8:res r8:a0 {
    *res = chiFromInt32(chi_Prim_uint64ToInt32(chiToUInt64(a0)));
}
// Inline primitive
uint64ToInt64 w8:res r8:a0 {
    *res = chiFromInt64(chi_Prim_uint64ToInt64(chiToUInt64(a0)));
}
// Inline primitive
uint64ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_uint64ToUInt32(chiToUInt64(a0)));
}
// Inline primitive
uint64Xor w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_uint64Xor(chiToUInt64(a0), chiToUInt64(a1)));
}
// Inline primitive
uint8ToUInt32 w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_uint8ToUInt32(chiToUInt8(a0)));
}
// Primitive in tail position
force r8:a0 {
    INSN_LEAVE;
    chi_Prim_force(a0);
}
// Primitive in tail position
par r8:a0 {
    INSN_LEAVE;
    chi_Prim_par(a0);
}
// Inline primitive
boolFalse w8:res {
    *res = chiFromBool(chi_Prim_boolFalse());
}
// Inline primitive
boolTrue w8:res {
    *res = chiFromBool(chi_Prim_boolTrue());
}
// Inline primitive
stringBuilderNew w8:res r8:a0 {
    *res = chi_Prim_stringBuilderNew(chiToUInt32(a0));
}
// Inline primitive
stringBuilderChar w8:res r8:a0 r8:a1 {
    *res = chi_Prim_stringBuilderChar(chiToChar(a0), a1);
}
// Inline primitive
stringBuilderString w8:res r8:a0 r8:a1 {
    *res = chi_Prim_stringBuilderString(a0, a1);
}
// Inline primitive
stringBuilderBuild w8:res r8:a0 {
    *res = chi_Prim_stringBuilderBuild(a0);
}
// Inline primitive
bufferSize w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_bufferSize(a0));
}
// Inline primitive
arraySize w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_arraySize(a0));
}
// Inline primitive
arrayCas w8:res r8:a0 r8:a1 r8:a2 r8:a3 {
    *res = chiFromBool(chi_Prim_arrayCas(a0, chiToUInt32(a1), a2, a3));
}
// Inline primitive
arrayClone w8:res r8:a0 r8:a1 r8:a2 {
    *res = chi_Prim_arrayClone(a0, chiToUInt32(a1), chiToUInt32(a2));
}
// Inline primitive
arrayCopy w8:res r8:a0 r8:a1 r8:a2 r8:a3 r8:a4 {
    *res = ({
 chi_Prim_arrayCopy(a0, chiToUInt32(a1), a2, chiToUInt32(a3), chiToUInt32(a4));
 CHI_FALSE;
});
}
// Inline primitive
arrayNew w8:res r8:a0 r8:a1 {
    *res = chi_Prim_arrayNew(chiToUInt32(a0), a1);
}
// Inline primitive
arrayRead w8:res r8:a0 r8:a1 {
    *res = chi_Prim_arrayRead(a0, chiToUInt32(a1));
}
// Inline primitive
arrayWrite w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_arrayWrite(a0, chiToUInt32(a1), a2);
 CHI_FALSE;
});
}
// Inline primitive
bufferClone w8:res r8:a0 r8:a1 r8:a2 {
    *res = chi_Prim_bufferClone(a0, chiToUInt32(a1), chiToUInt32(a2));
}
// Inline primitive
bufferCmp w8:res r8:a0 r8:a1 r8:a2 r8:a3 r8:a4 {
    *res = chiFromInt32(chi_Prim_bufferCmp( a0
                               , chiToUInt32(a1)
                               , a2
                               , chiToUInt32(a3)
                               , chiToUInt32(a4) ));
}
// Inline primitive
bufferCopy w8:res r8:a0 r8:a1 r8:a2 r8:a3 r8:a4 {
    *res = ({
 chi_Prim_bufferCopy(a0, chiToUInt32(a1), a2, chiToUInt32(a3), chiToUInt32(a4));
 CHI_FALSE;
});
}
// Inline primitive
bufferFill w8:res r8:a0 r8:a1 r8:a2 r8:a3 {
    *res = ({
 chi_Prim_bufferFill(a0, chiToUInt8(a1), chiToUInt32(a2), chiToUInt32(a3));
 CHI_FALSE;
});
}
// Inline primitive
bufferNew w8:res r8:a0 {
    *res = chi_Prim_bufferNew(chiToUInt32(a0));
}
// Inline primitive
bufferReadFloat32 w8:res r8:a0 r8:a1 {
    *res = chiFromFloat32(chi_Prim_bufferReadFloat32(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferReadFloat64 w8:res r8:a0 r8:a1 {
    *res = chiFromFloat64(chi_Prim_bufferReadFloat64(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferReadUInt16 w8:res r8:a0 r8:a1 {
    *res = chiFromUInt16(chi_Prim_bufferReadUInt16(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferReadUInt32 w8:res r8:a0 r8:a1 {
    *res = chiFromUInt32(chi_Prim_bufferReadUInt32(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferReadUInt64 w8:res r8:a0 r8:a1 {
    *res = chiFromUInt64(chi_Prim_bufferReadUInt64(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferReadUInt8 w8:res r8:a0 r8:a1 {
    *res = chiFromUInt8(chi_Prim_bufferReadUInt8(a0, chiToUInt32(a1)));
}
// Inline primitive
bufferWriteFloat32 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteFloat32(a0, chiToUInt32(a1), chiToFloat32(a2));
 CHI_FALSE;
});
}
// Inline primitive
bufferWriteFloat64 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteFloat64(a0, chiToUInt32(a1), chiToFloat64(a2));
 CHI_FALSE;
});
}
// Inline primitive
bufferWriteUInt16 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteUInt16(a0, chiToUInt32(a1), chiToUInt16(a2));
 CHI_FALSE;
});
}
// Inline primitive
bufferWriteUInt32 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteUInt32(a0, chiToUInt32(a1), chiToUInt32(a2));
 CHI_FALSE;
});
}
// Inline primitive
bufferWriteUInt64 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteUInt64(a0, chiToUInt32(a1), chiToUInt64(a2));
 CHI_FALSE;
});
}
// Inline primitive
bufferWriteUInt8 w8:res r8:a0 r8:a1 r8:a2 {
    *res = ({
 chi_Prim_bufferWriteUInt8(a0, chiToUInt32(a1), chiToUInt8(a2));
 CHI_FALSE;
});
}
// Primitive in tail position
catch r8:a0 r8:a1 {
    INSN_LEAVE;
    chi_Prim_catch(a0, a1);
}
// Primitive in tail position
throw r8:a0 {
    INSN_LEAVE;
    chi_Prim_throw(a0);
}
// Inline primitive
identical w8:res r8:a0 r8:a1 {
    *res = chiFromBool(chi_Prim_identical(a0, a1));
}
// Inline primitive
tag w8:res r8:a0 {
    *res = chiFromUInt32(chi_Prim_tag(a0));
}
