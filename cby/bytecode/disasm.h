// Generated by generate.pl from insn.defs and priminsn.defs
case OP_enter: {
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "NAME(nargs)VAL("%u"), (uint32_t)nargs);
}
break;
case OP_limit: {
    const uint16_t top = FETCH16;
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(top)REG" "NAME(lim)VAL("%u"), (uint32_t)top, (uint32_t)lim);
}
break;
case OP_adj: {
    const uint16_t delta = FETCH16;
    chiSinkFmt(sink, " "NAME(delta)VAL("%u"), (uint32_t)delta);
}
break;
case OP_idx: {
    const uint8_t res = FETCH8;
    const uint8_t var = FETCH8;
    const uint8_t idx = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(var)REG" "NAME(idx)VAL("%u"), (uint32_t)res, (uint32_t)var, (uint32_t)idx);
}
break;
case OP_idxl: {
    const uint16_t res = FETCH16;
    const uint16_t var = FETCH16;
    const uint16_t idx = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(var)REG" "NAME(idx)VAL("%u"), (uint32_t)res, (uint32_t)var, (uint32_t)idx);
}
break;
case OP_set: {
    const uint16_t var = FETCH16;
    const uint16_t i = FETCH16;
    const uint16_t field = FETCH16;
    chiSinkFmt(sink, " "NAME(var)REG" "NAME(i)VAL("%u")" "NAME(field)REG, (uint32_t)var, (uint32_t)i, (uint32_t)field);
}
break;
case OP_int8: {
    const uint8_t res = FETCH8;
    const int8_t val = (int8_t)FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%d"), (uint32_t)res, (int32_t)val);
}
break;
case OP_int32: {
    const uint16_t res = FETCH16;
    const int32_t val = (int32_t)FETCH32;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%d"), (uint32_t)res, (int32_t)val);
}
break;
case OP_int64: {
    const uint16_t res = FETCH16;
    const int64_t val = (int64_t)FETCH64;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%jd"), (uint32_t)res, val);
}
break;
case OP_uint8: {
    const uint8_t res = FETCH8;
    const uint8_t val = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%u"), (uint32_t)res, (uint32_t)val);
}
break;
case OP_uint32: {
    const uint16_t res = FETCH16;
    const uint32_t val = FETCH32;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%u"), (uint32_t)res, (uint32_t)val);
}
break;
case OP_uint64: {
    const uint16_t res = FETCH16;
    const uint64_t val = FETCH64;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%ju"), (uint32_t)res, val);
}
break;
case OP_float32: {
    const uint16_t res = FETCH16;
    const float val = CHI_CAST(FETCH32, float);
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%f"), (uint32_t)res, (double)val);
}
break;
case OP_float64: {
    const uint16_t res = FETCH16;
    const double val = CHI_CAST(FETCH64, double);
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%f"), (uint32_t)res, val);
}
break;
case OP_string: {
    const uint16_t res = FETCH16;
    const ChiStringRef strref = FETCH_STRING;
    chiSinkFmt(sink, " "NAME(res)REG" "VAL("%qS"), (uint32_t)res, strref);
}
break;
case OP_buffer: {
    const uint16_t res = FETCH16;
    const ChiStringRef bytesref = FETCH_STRING;
    chiSinkFmt(sink, " "NAME(res)REG" "VAL("%hS"), (uint32_t)res, bytesref);
}
break;
case OP_xint: {
    const uint16_t res = FETCH16;
    const ChiStringRef bytesref = FETCH_STRING;
    chiSinkFmt(sink, " "NAME(res)REG" "VAL("%hS"), (uint32_t)res, bytesref);
}
break;
case OP_xintn: {
    const uint16_t res = FETCH16;
    const ChiStringRef bytesref = FETCH_STRING;
    chiSinkFmt(sink, " "NAME(res)REG" "VAL("%hS"), (uint32_t)res, bytesref);
}
break;
case OP_xint8: {
    const uint8_t res = FETCH8;
    const int8_t val = (int8_t)FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%d"), (uint32_t)res, (int32_t)val);
}
break;
case OP_xint64: {
    const uint16_t res = FETCH16;
    const int64_t val = (int64_t)FETCH64;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(val)VAL("%jd"), (uint32_t)res, val);
}
break;
case OP_movc2: {
    const uint8_t res = FETCH8;
    const uint8_t src = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_movc3: {
    const uint8_t res = FETCH8;
    const uint8_t src = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_movc4: {
    const uint8_t res = FETCH8;
    const uint8_t src = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_movcl2: {
    const uint16_t res = FETCH16;
    const uint16_t src = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_movcl3: {
    const uint16_t res = FETCH16;
    const uint16_t src = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_movcl4: {
    const uint16_t res = FETCH16;
    const uint16_t src = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src)REG, (uint32_t)res, (uint32_t)src);
}
break;
case OP_mov1: {
    const uint8_t res = FETCH8;
    const uint8_t src0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG, (uint32_t)res, (uint32_t)src0);
}
break;
case OP_mov2: {
    const uint8_t res = FETCH8;
    const uint8_t src0 = FETCH8;
    const uint8_t src1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG" "NAME(src1)REG, (uint32_t)res, (uint32_t)src0, (uint32_t)src1);
}
break;
case OP_mov3: {
    const uint8_t res = FETCH8;
    const uint8_t src0 = FETCH8;
    const uint8_t src1 = FETCH8;
    const uint8_t src2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG" "NAME(src1)REG" "NAME(src2)REG, (uint32_t)res, (uint32_t)src0, (uint32_t)src1, (uint32_t)src2);
}
break;
case OP_mov4: {
    const uint8_t res = FETCH8;
    const uint8_t src0 = FETCH8;
    const uint8_t src1 = FETCH8;
    const uint8_t src2 = FETCH8;
    const uint8_t src3 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG" "NAME(src1)REG" "NAME(src2)REG" "NAME(src3)REG, (uint32_t)res, (uint32_t)src0, (uint32_t)src1, (uint32_t)src2, (uint32_t)src3);
}
break;
case OP_movl1: {
    const uint16_t res = FETCH16;
    const uint16_t src0 = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG, (uint32_t)res, (uint32_t)src0);
}
break;
case OP_movl2: {
    const uint16_t res = FETCH16;
    const uint16_t src0 = FETCH16;
    const uint16_t src1 = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(src0)REG" "NAME(src1)REG, (uint32_t)res, (uint32_t)src0, (uint32_t)src1);
}
break;
case OP_choice: {
    const uint8_t res = FETCH8;
    const uint8_t scrut = FETCH8;
    const uint8_t a = FETCH8;
    const uint8_t b = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(scrut)REG" "NAME(a)REG" "NAME(b)REG, (uint32_t)res, (uint32_t)scrut, (uint32_t)a, (uint32_t)b);
}
break;
case OP_thk: {
    const uint16_t res = FETCH16;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    const uint16_t nclos = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "FNREF" "NAME(nclos)VAL("%u"), (uint32_t)res, FNREF_ARGS, (uint32_t)nclos);
    chiSinkPuts(sink, " "NAME(clos)"[");
    for (uint32_t clos_count = 0; clos_count < nclos; ++clos_count) {
        if (clos_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_thk0: {
    const uint8_t res = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "FNREF, (uint32_t)res, FNREF_ARGS);
}
break;
case OP_thk1: {
    const uint8_t res = FETCH8;
    const uint8_t c0 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(c0)REG" "FNREF, (uint32_t)res, (uint32_t)c0, FNREF_ARGS);
}
break;
case OP_thk2: {
    const uint8_t res = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(c0)REG" "NAME(c1)REG" "FNREF, (uint32_t)res, (uint32_t)c0, (uint32_t)c1, FNREF_ARGS);
}
break;
case OP_thk3: {
    const uint8_t res = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    const uint8_t c2 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(c0)REG" "NAME(c1)REG" "NAME(c2)REG" "FNREF, (uint32_t)res, (uint32_t)c0, (uint32_t)c1, (uint32_t)c2, FNREF_ARGS);
}
break;
case OP_thk4: {
    const uint8_t res = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    const uint8_t c2 = FETCH8;
    const uint8_t c3 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(c0)REG" "NAME(c1)REG" "NAME(c2)REG" "NAME(c3)REG" "FNREF, (uint32_t)res, (uint32_t)c0, (uint32_t)c1, (uint32_t)c2, (uint32_t)c3, FNREF_ARGS);
}
break;
case OP_fn: {
    const uint16_t res = FETCH16;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    const uint8_t arity = FETCH8;
    const uint16_t nclos = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "FNREF" "NAME(arity)VAL("%u")" "NAME(nclos)VAL("%u"), (uint32_t)res, FNREF_ARGS, (uint32_t)arity, (uint32_t)nclos);
    chiSinkPuts(sink, " "NAME(clos)"[");
    for (uint32_t clos_count = 0; clos_count < nclos; ++clos_count) {
        if (clos_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_fn0: {
    const uint8_t res = FETCH8;
    const uint8_t arity = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(arity)VAL("%u")" "FNREF, (uint32_t)res, (uint32_t)arity, FNREF_ARGS);
}
break;
case OP_fn1: {
    const uint8_t res = FETCH8;
    const uint8_t arity = FETCH8;
    const uint8_t c0 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(arity)VAL("%u")" "NAME(c0)REG" "FNREF, (uint32_t)res, (uint32_t)arity, (uint32_t)c0, FNREF_ARGS);
}
break;
case OP_fn2: {
    const uint8_t res = FETCH8;
    const uint8_t arity = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(arity)VAL("%u")" "NAME(c0)REG" "NAME(c1)REG" "FNREF, (uint32_t)res, (uint32_t)arity, (uint32_t)c0, (uint32_t)c1, FNREF_ARGS);
}
break;
case OP_fn3: {
    const uint8_t res = FETCH8;
    const uint8_t arity = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    const uint8_t c2 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(arity)VAL("%u")" "NAME(c0)REG" "NAME(c1)REG" "NAME(c2)REG" "FNREF, (uint32_t)res, (uint32_t)arity, (uint32_t)c0, (uint32_t)c1, (uint32_t)c2, FNREF_ARGS);
}
break;
case OP_fn4: {
    const uint8_t res = FETCH8;
    const uint8_t arity = FETCH8;
    const uint8_t c0 = FETCH8;
    const uint8_t c1 = FETCH8;
    const uint8_t c2 = FETCH8;
    const uint8_t c3 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(arity)VAL("%u")" "NAME(c0)REG" "NAME(c1)REG" "NAME(c2)REG" "NAME(c3)REG" "FNREF, (uint32_t)res, (uint32_t)arity, (uint32_t)c0, (uint32_t)c1, (uint32_t)c2, (uint32_t)c3, FNREF_ARGS);
}
break;
case OP_con: {
    const uint16_t res = FETCH16;
    const uint16_t tag = FETCH16;
    const uint16_t size = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u")" "NAME(size)VAL("%u"), (uint32_t)res, (uint32_t)tag, (uint32_t)size);
    chiSinkPuts(sink, " "NAME(fields)"[");
    for (uint32_t fields_count = 0; fields_count < size; ++fields_count) {
        if (fields_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_con0: {
    const uint8_t res = FETCH8;
    const uint8_t tag = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u"), (uint32_t)res, (uint32_t)tag);
}
break;
case OP_conl0: {
    const uint16_t res = FETCH16;
    const uint16_t tag = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u"), (uint32_t)res, (uint32_t)tag);
}
break;
case OP_con1: {
    const uint8_t res = FETCH8;
    const uint8_t tag = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u")" "NAME(a0)REG, (uint32_t)res, (uint32_t)tag, (uint32_t)a0);
}
break;
case OP_con2: {
    const uint8_t res = FETCH8;
    const uint8_t tag = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u")" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)tag, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_con3: {
    const uint8_t res = FETCH8;
    const uint8_t tag = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u")" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)tag, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_con4: {
    const uint8_t res = FETCH8;
    const uint8_t tag = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(tag)VAL("%u")" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG, (uint32_t)res, (uint32_t)tag, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3);
}
break;
case OP_casetbl: {
    const uint16_t scrut = FETCH16;
    const uint32_t lo = FETCH32;
    const uint32_t hi = FETCH32;
    chiSinkFmt(sink, " "NAME(scrut)REG" "NAME(lo)VAL("%u")" "NAME(hi)VAL("%u"), (uint32_t)scrut, (uint32_t)lo, (uint32_t)hi);
    chiSinkPuts(sink, " "NAME(table)"[");
    for (uint32_t table_count = 0; table_count < hi - lo + 1; ++table_count) {
        if (table_count) chiSinkPuts(sink, "; ");
        const uint32_t target = FETCH32;
        chiSinkFmt(sink, VAL("%u"), (uint32_t)target);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_case: {
    const uint16_t scrut = FETCH16;
    const uint16_t nalts = FETCH16;
    chiSinkFmt(sink, " "NAME(scrut)REG" "NAME(nalts)VAL("%u"), (uint32_t)scrut, (uint32_t)nalts);
    chiSinkPuts(sink, " "NAME(table)"[");
    for (uint32_t table_count = 0; table_count < nalts; ++table_count) {
        if (table_count) chiSinkPuts(sink, "; ");
        const uint32_t val = FETCH32;
        const uint32_t target = FETCH32;
        chiSinkFmt(sink, VAL("%u")" "VAL("%u"), (uint32_t)val, (uint32_t)target);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_cont: {
    const uint8_t top = FETCH8;
    const uint8_t off = FETCH8;
    chiSinkFmt(sink, " "NAME(top)REG" "NAME(off)VAL("%u"), (uint32_t)top, (uint32_t)off);
}
break;
case OP_contl: {
    const uint16_t top = FETCH16;
    const uint32_t off = FETCH32;
    chiSinkFmt(sink, " "NAME(top)REG" "NAME(off)VAL("%u"), (uint32_t)top, (uint32_t)off);
}
break;
case OP_ret1: {
    const uint8_t v0 = FETCH8;
    chiSinkFmt(sink, " "NAME(v0)REG, (uint32_t)v0);
}
break;
case OP_ret2: {
    const uint8_t v0 = FETCH8;
    const uint8_t v1 = FETCH8;
    chiSinkFmt(sink, " "NAME(v0)REG" "NAME(v1)REG, (uint32_t)v0, (uint32_t)v1);
}
break;
case OP_ret3: {
    const uint8_t v0 = FETCH8;
    const uint8_t v1 = FETCH8;
    const uint8_t v2 = FETCH8;
    chiSinkFmt(sink, " "NAME(v0)REG" "NAME(v1)REG" "NAME(v2)REG, (uint32_t)v0, (uint32_t)v1, (uint32_t)v2);
}
break;
case OP_ret4: {
    const uint8_t v0 = FETCH8;
    const uint8_t v1 = FETCH8;
    const uint8_t v2 = FETCH8;
    const uint8_t v3 = FETCH8;
    chiSinkFmt(sink, " "NAME(v0)REG" "NAME(v1)REG" "NAME(v2)REG" "NAME(v3)REG, (uint32_t)v0, (uint32_t)v1, (uint32_t)v2, (uint32_t)v3);
}
break;
case OP_ret: {
    const uint8_t nvals = FETCH8;
    chiSinkFmt(sink, " "NAME(nvals)VAL("%u"), (uint32_t)nvals);
    chiSinkPuts(sink, " "NAME(vals)"[");
    for (uint32_t vals_count = 0; vals_count < nvals; ++vals_count) {
        if (vals_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_if: {
    const uint8_t scrut = FETCH8;
    const uint8_t off = FETCH8;
    chiSinkFmt(sink, " "NAME(scrut)REG" "NAME(off)VAL("%u"), (uint32_t)scrut, (uint32_t)off);
}
break;
case OP_ifl: {
    const uint16_t scrut = FETCH16;
    const uint32_t off = FETCH32;
    chiSinkFmt(sink, " "NAME(scrut)REG" "NAME(off)VAL("%u"), (uint32_t)scrut, (uint32_t)off);
}
break;
case OP_ifeq: {
    const uint8_t val = FETCH8;
    const uint8_t scrut = FETCH8;
    const uint8_t off = FETCH8;
    chiSinkFmt(sink, " "NAME(val)VAL("%u")" "NAME(scrut)REG" "NAME(off)VAL("%u"), (uint32_t)val, (uint32_t)scrut, (uint32_t)off);
}
break;
case OP_ifeql: {
    const uint32_t val = FETCH32;
    const uint16_t scrut = FETCH16;
    const uint32_t off = FETCH32;
    chiSinkFmt(sink, " "NAME(val)VAL("%u")" "NAME(scrut)REG" "NAME(off)VAL("%u"), (uint32_t)val, (uint32_t)scrut, (uint32_t)off);
}
break;
case OP_jmp: {
    const uint8_t off = FETCH8;
    chiSinkFmt(sink, " "NAME(off)VAL("%u"), (uint32_t)off);
}
break;
case OP_jmpl: {
    const uint32_t off = FETCH32;
    chiSinkFmt(sink, " "NAME(off)VAL("%u"), (uint32_t)off);
}
break;
case OP_kapp: {
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    const uint16_t fn = FETCH16;
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "FNREF" "NAME(fn)REG" "NAME(nargs)VAL("%u"), FNREF_ARGS, (uint32_t)fn, (uint32_t)nargs);
    chiSinkPuts(sink, " "NAME(args)"[");
    for (uint32_t args_count = 0; args_count < nargs; ++args_count) {
        if (args_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_kapp1: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "FNREF, (uint32_t)fn, (uint32_t)a0, FNREF_ARGS);
}
break;
case OP_kapp2: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "FNREF, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, FNREF_ARGS);
}
break;
case OP_kapp3: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "FNREF, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, FNREF_ARGS);
}
break;
case OP_kapp4: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "FNREF, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, FNREF_ARGS);
}
break;
case OP_kapp5: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    const uint8_t a4 = FETCH8;
    int32_t _fnref = (int32_t)FETCH32; const CbyCode* fnref = IP + _fnref;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "NAME(a4)REG" "FNREF, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, (uint32_t)a4, FNREF_ARGS);
}
break;
case OP_app: {
    const uint16_t fn = FETCH16;
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(nargs)VAL("%u"), (uint32_t)fn, (uint32_t)nargs);
    chiSinkPuts(sink, " "NAME(args)"[");
    for (uint32_t args_count = 0; args_count < nargs; ++args_count) {
        if (args_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_app1: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG, (uint32_t)fn, (uint32_t)a0);
}
break;
case OP_app2: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_app3: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_app4: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3);
}
break;
case OP_app5: {
    const uint8_t fn = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    const uint8_t a4 = FETCH8;
    chiSinkFmt(sink, " "NAME(fn)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "NAME(a4)REG, (uint32_t)fn, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, (uint32_t)a4);
}
break;
case OP_clos0: {
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(lim)VAL("%u"), (uint32_t)lim);
}
break;
case OP_clos1: {
    const uint8_t arity = FETCH8;
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(arity)VAL("%u")" "NAME(lim)VAL("%u"), (uint32_t)arity, (uint32_t)lim);
}
break;
case OP_clos2: {
    const uint8_t arity = FETCH8;
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(arity)VAL("%u")" "NAME(lim)VAL("%u"), (uint32_t)arity, (uint32_t)lim);
}
break;
case OP_clos3: {
    const uint8_t arity = FETCH8;
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(arity)VAL("%u")" "NAME(lim)VAL("%u"), (uint32_t)arity, (uint32_t)lim);
}
break;
case OP_clos4: {
    const uint8_t arity = FETCH8;
    const uint8_t lim = FETCH8;
    chiSinkFmt(sink, " "NAME(arity)VAL("%u")" "NAME(lim)VAL("%u"), (uint32_t)arity, (uint32_t)lim);
}
break;
case OP_clos: {
    const uint8_t arity = FETCH8;
    const uint16_t lim = FETCH16;
    const uint16_t size = FETCH16;
    chiSinkFmt(sink, " "NAME(arity)VAL("%u")" "NAME(lim)VAL("%u")" "NAME(size)VAL("%u"), (uint32_t)arity, (uint32_t)lim, (uint32_t)size);
}
break;
case OP_ffiget: {
    const uint16_t res = FETCH16;
    int32_t _ffiref = (int32_t)FETCH32; const CbyCode* ffiref = IP + _ffiref;
    chiSinkFmt(sink, " "NAME(res)REG" "FFIREF, (uint32_t)res, FFIREF_ARGS);
}
break;
case OP_ffiset: {
    const uint16_t var = FETCH16;
    int32_t _ffiref = (int32_t)FETCH32; const CbyCode* ffiref = IP + _ffiref;
    chiSinkFmt(sink, " "NAME(var)REG" "FFIREF, (uint32_t)var, FFIREF_ARGS);
}
break;
case OP_ffitail: {
    int32_t _ffiref = (int32_t)FETCH32; const CbyCode* ffiref = IP + _ffiref;
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "FFIREF" "NAME(nargs)VAL("%u"), FFIREF_ARGS, (uint32_t)nargs);
    chiSinkPuts(sink, " "NAME(args)"[");
    for (uint32_t args_count = 0; args_count < nargs; ++args_count) {
        if (args_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_ffiinl: {
    const uint16_t res = FETCH16;
    int32_t _ffiref = (int32_t)FETCH32; const CbyCode* ffiref = IP + _ffiref;
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "FFIREF" "NAME(nargs)VAL("%u"), (uint32_t)res, FFIREF_ARGS, (uint32_t)nargs);
    chiSinkPuts(sink, " "NAME(args)"[");
    for (uint32_t args_count = 0; args_count < nargs; ++args_count) {
        if (args_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_ffiprot: {
    int32_t _ffiref = (int32_t)FETCH32; const CbyCode* ffiref = IP + _ffiref;
    const uint8_t nargs = FETCH8;
    chiSinkFmt(sink, " "FFIREF" "NAME(nargs)VAL("%u"), FFIREF_ARGS, (uint32_t)nargs);
    chiSinkPuts(sink, " "NAME(args)"[");
    for (uint32_t args_count = 0; args_count < nargs; ++args_count) {
        if (args_count) chiSinkPuts(sink, "; ");
        const uint16_t a = FETCH16;
        chiSinkFmt(sink, REG, (uint32_t)a);
    }
    chiSinkPuts(sink, "]");
}
break;
case OP_thread: {
    const uint16_t res = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG, (uint32_t)res);
}
break;
case OP_proc: {
    const uint16_t res = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG, (uint32_t)res);
}
break;
case OP_plocal: {
    const uint16_t res = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG, (uint32_t)res);
}
break;
case OP_tstate: {
    const uint16_t res = FETCH16;
    const uint16_t thr = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(thr)REG, (uint32_t)res, (uint32_t)thr);
}
break;
case OP_evfilt: {
    const uint16_t res = FETCH16;
    const uint16_t f = FETCH16;
    const uint16_t n = FETCH16;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(f)REG" "NAME(n)REG, (uint32_t)res, (uint32_t)f, (uint32_t)n);
}
break;
case OP_bitsToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_bitsToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_charEq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_charLe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_charLt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_charNe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_charToString: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_charToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Abs: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Acos: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Asin: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Atan: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Ceil: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Cos: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Cosh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Exp: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Expm1: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Floor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Log: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Log1p: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Pow: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Round: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Sin: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Sinh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Sqrt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float32Tan: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Tanh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToBits: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32ToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float32Trunc: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Abs: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Acos: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Asin: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Atan: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Ceil: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Cos: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Cosh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Exp: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Expm1: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Floor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Log: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Log1p: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Pow: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Round: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Sin: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Sinh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Sqrt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_float64Tan: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Tanh: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToBits: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64ToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_float64Trunc: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int16ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int16ToUInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32And: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Mod: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32Not: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32Or: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Quo: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Rem: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Shl: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Shr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int32ToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32ToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int32Xor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64And: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Mod: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64Not: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64Or: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Quo: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Rem: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Shl: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Shr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int64ToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64ToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64ToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int64Xor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_int8ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_int8ToUInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intAdd: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intAnd: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intCmp: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intDiv: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intEq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intLe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intLt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intMod: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intMul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intNe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intNeg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intNot: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intOr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intQuo: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intRem: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intShl: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intShr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intSub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_intToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_intXor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCmp: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorBegin: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_stringCursorEnd: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_stringCursorEq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorLe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorLt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorNe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorGet: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorNext: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringCursorPrev: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringEq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringLe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringLt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringNe: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringNull: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_stringSlice: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_uint16ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint16ToInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32And: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Mod: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32Not: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32Or: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Shl: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Shr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint32ToChar: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToUInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32ToUInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint32Xor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Add: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64And: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Div: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Eq: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Le: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Lt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Mod: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Mul: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Ne: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Neg: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64Not: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64Or: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Shl: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Shr: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64Sub: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint64ToFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64ToFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64ToInt: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64ToInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64ToInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint64Xor: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_uint8ToUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_uint8ToInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_lazyForce: {
    const uint8_t thk = FETCH8;
    chiSinkFmt(sink, " "NAME(thk)REG, (uint32_t)thk);
}
break;
case OP_stringBuilderNew: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_stringBuilderChar: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringBuilderString: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_stringBuilderBuild: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_bufferSize: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_arraySize: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_arrayCas: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3);
}
break;
case OP_arrayClone: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_arrayCopy: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    const uint8_t a4 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "NAME(a4)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, (uint32_t)a4);
}
break;
case OP_arrayNew: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_arrayRead: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_arrayWrite: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferClone: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferCmp: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    const uint8_t a4 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "NAME(a4)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, (uint32_t)a4);
}
break;
case OP_bufferCopy: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    const uint8_t a4 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG" "NAME(a4)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3, (uint32_t)a4);
}
break;
case OP_bufferFill: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    const uint8_t a3 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG" "NAME(a3)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2, (uint32_t)a3);
}
break;
case OP_bufferNew: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
case OP_bufferReadFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferReadFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferReadUInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferReadUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferReadUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferReadUInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_bufferWriteFloat32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferWriteFloat64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferWriteUInt16: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferWriteUInt32: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferWriteUInt64: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_bufferWriteUInt8: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    const uint8_t a2 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG" "NAME(a2)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1, (uint32_t)a2);
}
break;
case OP_identical: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    const uint8_t a1 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG" "NAME(a1)REG, (uint32_t)res, (uint32_t)a0, (uint32_t)a1);
}
break;
case OP_tag: {
    const uint8_t res = FETCH8;
    const uint8_t a0 = FETCH8;
    chiSinkFmt(sink, " "NAME(res)REG" "NAME(a0)REG, (uint32_t)res, (uint32_t)a0);
}
break;
